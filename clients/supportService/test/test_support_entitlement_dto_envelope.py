# coding: utf-8

"""
    SupportService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.support_entitlement_dto_envelope import SupportEntitlementDtoEnvelope

class TestSupportEntitlementDtoEnvelope(unittest.TestCase):
    """SupportEntitlementDtoEnvelope unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SupportEntitlementDtoEnvelope:
        """Test SupportEntitlementDtoEnvelope
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SupportEntitlementDtoEnvelope`
        """
        model = SupportEntitlementDtoEnvelope()
        if include_optional:
            return SupportEntitlementDtoEnvelope(
                is_success = True,
                error_message = '',
                correlation_id = '',
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                activity_id = '',
                result = openapi_client.models.support_entitlement_dto.SupportEntitlementDto(
                    id = '', 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    title = '', 
                    description = '', 
                    start_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    end_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    next_invoice_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    code = '', 
                    signature = '', 
                    quantity = 56, 
                    repetitions = 56, 
                    charge_attempts = 56, 
                    free_trial_in_days = 56, 
                    grace_period_in_days = 56, 
                    custom_renewal_period = 56, 
                    enable_automatic_renew = True, 
                    enable_pro_rate_billing = True, 
                    enable_usage_threshold = True, 
                    enable_automatic_disable = True, 
                    enable_automatic_payments = True, 
                    usage_threshold = 56, 
                    data = '', 
                    data_label = '', 
                    data1 = '', 
                    data1_label = '', 
                    data2 = '', 
                    data2_label = '', 
                    data3 = '', 
                    data3_label = '', 
                    data4 = '', 
                    data4_label = '', 
                    data5 = '', 
                    data5_label = '', 
                    data6 = '', 
                    data6_label = '', 
                    data7 = '', 
                    data7_label = '', 
                    data8 = '', 
                    data8_label = '', 
                    data9 = '', 
                    data9_label = '', 
                    account_holder_id = '', 
                    individual_id = '', 
                    organization_id = '', 
                    receiver_business_id = '', 
                    business_id = '', 
                    business_profile_record_id = '', 
                    payment_token_id = '', 
                    wallet_account_id = '', 
                    security_certificate_id = '', )
            )
        else:
            return SupportEntitlementDtoEnvelope(
        )
        """

    def testSupportEntitlementDtoEnvelope(self):
        """Test SupportEntitlementDtoEnvelope"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
