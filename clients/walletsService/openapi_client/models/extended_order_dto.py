# coding: utf-8

"""
    WalletsService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.contact_dto import ContactDto
from openapi_client.models.currency import Currency
from openapi_client.models.money import Money
from openapi_client.models.tenant_dto import TenantDto
from openapi_client.models.tenant_enrolment_dto import TenantEnrolmentDto
from openapi_client.models.user_dto import UserDto
from typing import Optional, Set
from typing_extensions import Self

class ExtendedOrderDto(BaseModel):
    """
    ExtendedOrderDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    closed: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    description: Optional[StrictStr] = None
    price_list_id: Optional[StrictStr] = Field(default=None, alias="priceListId")
    enrollment_id: Optional[StrictStr] = Field(default=None, alias="enrollmentId")
    individual_id: Optional[StrictStr] = Field(default=None, alias="individualId")
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    receiver_tenant_id: Optional[StrictStr] = Field(default=None, alias="receiverTenantId")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    billing_email: Optional[StrictStr] = Field(default=None, alias="billingEmail")
    address_line1: Optional[StrictStr] = Field(default=None, alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="addressLine2")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    country_id: Optional[StrictStr] = Field(default=None, alias="countryId")
    state_id: Optional[StrictStr] = Field(default=None, alias="stateId")
    city_id: Optional[StrictStr] = Field(default=None, alias="cityId")
    customer_notes: Optional[StrictStr] = Field(default=None, alias="customerNotes")
    forex_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="forexRate")
    total: Optional[Union[StrictFloat, StrictInt]] = None
    total_taxes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxes")
    total_tax_base: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxBase")
    total_discounts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalDiscounts")
    total_surcharges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalSurcharges")
    total_global_discounts: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGlobalDiscounts")
    total_global_surcharges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGlobalSurcharges")
    total_taxes_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxesInUsd")
    total_amount_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalAmountInUsd")
    total_profit_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalProfitInUsd")
    total_tax_base_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxBaseInUsd")
    total_discounts_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalDiscountsInUsd")
    total_surcharges_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalSurchargesInUsd")
    total_detail_amount_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalDetailAmountInUsd")
    total_global_discounts_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGlobalDiscountsInUsd")
    total_global_surcharges_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalGlobalSurchargesInUsd")
    total_withholding_taxes_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalWithholdingTaxesInUsd")
    total_shipping_cost_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalShippingCostInUsd")
    total_shipping_taxes_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalShippingTaxesInUsd")
    currency: Optional[Currency] = None
    total_in_usd: Optional[Money] = Field(default=None, alias="totalInUsd")
    total_tax_amount_in_usd: Optional[Money] = Field(default=None, alias="totalTaxAmountInUsd")
    total_tax_base_amount_in_usd: Optional[Money] = Field(default=None, alias="totalTaxBaseAmountInUsd")
    total_discounts_amount_in_usd: Optional[Money] = Field(default=None, alias="totalDiscountsAmountInUsd")
    total_surcharges_amount_in_usd: Optional[Money] = Field(default=None, alias="totalSurchargesAmountInUsd")
    total_global_discounts_amount_in_usd: Optional[Money] = Field(default=None, alias="totalGlobalDiscountsAmountInUsd")
    total_global_surcharges_amount_in_usd: Optional[Money] = Field(default=None, alias="totalGlobalSurchargesAmountInUsd")
    total_amount: Optional[Money] = Field(default=None, alias="totalAmount")
    total_tax_amount: Optional[Money] = Field(default=None, alias="totalTaxAmount")
    total_tax_base_amount: Optional[Money] = Field(default=None, alias="totalTaxBaseAmount")
    total_discounts_amount: Optional[Money] = Field(default=None, alias="totalDiscountsAmount")
    total_surcharges_amount: Optional[Money] = Field(default=None, alias="totalSurchargesAmount")
    total_global_discounts_amount: Optional[Money] = Field(default=None, alias="totalGlobalDiscountsAmount")
    total_global_surcharges_amount: Optional[Money] = Field(default=None, alias="totalGlobalSurchargesAmount")
    order_lines_count: Optional[StrictInt] = Field(default=None, alias="orderLinesCount")
    quote_id: Optional[StrictStr] = Field(default=None, alias="quoteId")
    wallet_id: Optional[StrictStr] = Field(default=None, alias="walletId")
    payment_term_id: Optional[StrictStr] = Field(default=None, alias="paymentTermId")
    parent_order_id: Optional[StrictStr] = Field(default=None, alias="parentOrderId")
    shipping_method_id: Optional[StrictStr] = Field(default=None, alias="shippingMethodId")
    billing_location_id: Optional[StrictStr] = Field(default=None, alias="billingLocationId")
    shipping_location_id: Optional[StrictStr] = Field(default=None, alias="shippingLocationId")
    qualified_identifier: Optional[StrictStr] = Field(default=None, alias="qualifiedIdentifier")
    cost_calculation_method: Optional[StrictInt] = Field(default=None, alias="costCalculationMethod")
    freight_terms: Optional[StrictInt] = Field(default=None, alias="freightTerms")
    order_status: Optional[StrictInt] = Field(default=None, alias="orderStatus")
    requested_delivery_date: Optional[datetime] = Field(default=None, alias="requestedDeliveryDate")
    custom_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customTaxAmount")
    custom_total_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customTotalAmount")
    custom_detail_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customDetailAmount")
    custom_profit_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customProfitAmount")
    custom_discounts_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customDiscountsAmount")
    custom_surcharges_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customSurchargesAmount")
    custom_shipping_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customShippingTaxAmount")
    custom_shipping_cost_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customShippingCostAmount")
    custom_withholding_tax_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="customWithholdingTaxAmount")
    user: Optional[UserDto] = None
    tenant: Optional[TenantDto] = None
    individual: Optional[ContactDto] = None
    organization: Optional[ContactDto] = None
    receiver_tenant: Optional[TenantDto] = Field(default=None, alias="receiverTenant")
    enrollment: Optional[TenantEnrolmentDto] = None
    __properties: ClassVar[List[str]] = ["id", "timestamp", "closed", "type", "title", "userId", "tenantId", "currencyId", "description", "priceListId", "enrollmentId", "individualId", "organizationId", "receiverTenantId", "firstName", "lastName", "companyName", "billingEmail", "addressLine1", "addressLine2", "postalCode", "countryId", "stateId", "cityId", "customerNotes", "forexRate", "total", "totalTaxes", "totalTaxBase", "totalDiscounts", "totalSurcharges", "totalGlobalDiscounts", "totalGlobalSurcharges", "totalTaxesInUsd", "totalAmountInUsd", "totalProfitInUsd", "totalTaxBaseInUsd", "totalDiscountsInUsd", "totalSurchargesInUsd", "totalDetailAmountInUsd", "totalGlobalDiscountsInUsd", "totalGlobalSurchargesInUsd", "totalWithholdingTaxesInUsd", "totalShippingCostInUsd", "totalShippingTaxesInUsd", "currency", "totalInUsd", "totalTaxAmountInUsd", "totalTaxBaseAmountInUsd", "totalDiscountsAmountInUsd", "totalSurchargesAmountInUsd", "totalGlobalDiscountsAmountInUsd", "totalGlobalSurchargesAmountInUsd", "totalAmount", "totalTaxAmount", "totalTaxBaseAmount", "totalDiscountsAmount", "totalSurchargesAmount", "totalGlobalDiscountsAmount", "totalGlobalSurchargesAmount", "orderLinesCount", "quoteId", "walletId", "paymentTermId", "parentOrderId", "shippingMethodId", "billingLocationId", "shippingLocationId", "qualifiedIdentifier", "costCalculationMethod", "freightTerms", "orderStatus", "requestedDeliveryDate", "customTaxAmount", "customTotalAmount", "customDetailAmount", "customProfitAmount", "customDiscountsAmount", "customSurchargesAmount", "customShippingTaxAmount", "customShippingCostAmount", "customWithholdingTaxAmount", "user", "tenant", "individual", "organization", "receiverTenant", "enrollment"]

    @field_validator('cost_calculation_method')
    def cost_calculation_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('freight_terms')
    def freight_terms_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('order_status')
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]):
            raise ValueError("must be one of enum values (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedOrderDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_in_usd
        if self.total_in_usd:
            _dict['totalInUsd'] = self.total_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_tax_amount_in_usd
        if self.total_tax_amount_in_usd:
            _dict['totalTaxAmountInUsd'] = self.total_tax_amount_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_tax_base_amount_in_usd
        if self.total_tax_base_amount_in_usd:
            _dict['totalTaxBaseAmountInUsd'] = self.total_tax_base_amount_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_discounts_amount_in_usd
        if self.total_discounts_amount_in_usd:
            _dict['totalDiscountsAmountInUsd'] = self.total_discounts_amount_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_surcharges_amount_in_usd
        if self.total_surcharges_amount_in_usd:
            _dict['totalSurchargesAmountInUsd'] = self.total_surcharges_amount_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_global_discounts_amount_in_usd
        if self.total_global_discounts_amount_in_usd:
            _dict['totalGlobalDiscountsAmountInUsd'] = self.total_global_discounts_amount_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_global_surcharges_amount_in_usd
        if self.total_global_surcharges_amount_in_usd:
            _dict['totalGlobalSurchargesAmountInUsd'] = self.total_global_surcharges_amount_in_usd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_amount
        if self.total_amount:
            _dict['totalAmount'] = self.total_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_tax_amount
        if self.total_tax_amount:
            _dict['totalTaxAmount'] = self.total_tax_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_tax_base_amount
        if self.total_tax_base_amount:
            _dict['totalTaxBaseAmount'] = self.total_tax_base_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_discounts_amount
        if self.total_discounts_amount:
            _dict['totalDiscountsAmount'] = self.total_discounts_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_surcharges_amount
        if self.total_surcharges_amount:
            _dict['totalSurchargesAmount'] = self.total_surcharges_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_global_discounts_amount
        if self.total_global_discounts_amount:
            _dict['totalGlobalDiscountsAmount'] = self.total_global_discounts_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_global_surcharges_amount
        if self.total_global_surcharges_amount:
            _dict['totalGlobalSurchargesAmount'] = self.total_global_surcharges_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of individual
        if self.individual:
            _dict['individual'] = self.individual.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of receiver_tenant
        if self.receiver_tenant:
            _dict['receiverTenant'] = self.receiver_tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of enrollment
        if self.enrollment:
            _dict['enrollment'] = self.enrollment.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if price_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.price_list_id is None and "price_list_id" in self.model_fields_set:
            _dict['priceListId'] = None

        # set to None if enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrollment_id is None and "enrollment_id" in self.model_fields_set:
            _dict['enrollmentId'] = None

        # set to None if individual_id (nullable) is None
        # and model_fields_set contains the field
        if self.individual_id is None and "individual_id" in self.model_fields_set:
            _dict['individualId'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if receiver_tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.receiver_tenant_id is None and "receiver_tenant_id" in self.model_fields_set:
            _dict['receiverTenantId'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if billing_email (nullable) is None
        # and model_fields_set contains the field
        if self.billing_email is None and "billing_email" in self.model_fields_set:
            _dict['billingEmail'] = None

        # set to None if address_line1 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line1 is None and "address_line1" in self.model_fields_set:
            _dict['addressLine1'] = None

        # set to None if address_line2 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line2 is None and "address_line2" in self.model_fields_set:
            _dict['addressLine2'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if country_id (nullable) is None
        # and model_fields_set contains the field
        if self.country_id is None and "country_id" in self.model_fields_set:
            _dict['countryId'] = None

        # set to None if state_id (nullable) is None
        # and model_fields_set contains the field
        if self.state_id is None and "state_id" in self.model_fields_set:
            _dict['stateId'] = None

        # set to None if city_id (nullable) is None
        # and model_fields_set contains the field
        if self.city_id is None and "city_id" in self.model_fields_set:
            _dict['cityId'] = None

        # set to None if customer_notes (nullable) is None
        # and model_fields_set contains the field
        if self.customer_notes is None and "customer_notes" in self.model_fields_set:
            _dict['customerNotes'] = None

        # set to None if quote_id (nullable) is None
        # and model_fields_set contains the field
        if self.quote_id is None and "quote_id" in self.model_fields_set:
            _dict['quoteId'] = None

        # set to None if wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.wallet_id is None and "wallet_id" in self.model_fields_set:
            _dict['walletId'] = None

        # set to None if payment_term_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_term_id is None and "payment_term_id" in self.model_fields_set:
            _dict['paymentTermId'] = None

        # set to None if parent_order_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_order_id is None and "parent_order_id" in self.model_fields_set:
            _dict['parentOrderId'] = None

        # set to None if shipping_method_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_method_id is None and "shipping_method_id" in self.model_fields_set:
            _dict['shippingMethodId'] = None

        # set to None if billing_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_location_id is None and "billing_location_id" in self.model_fields_set:
            _dict['billingLocationId'] = None

        # set to None if shipping_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_location_id is None and "shipping_location_id" in self.model_fields_set:
            _dict['shippingLocationId'] = None

        # set to None if qualified_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.qualified_identifier is None and "qualified_identifier" in self.model_fields_set:
            _dict['qualifiedIdentifier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedOrderDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "closed": obj.get("closed"),
            "type": obj.get("type"),
            "title": obj.get("title"),
            "userId": obj.get("userId"),
            "tenantId": obj.get("tenantId"),
            "currencyId": obj.get("currencyId"),
            "description": obj.get("description"),
            "priceListId": obj.get("priceListId"),
            "enrollmentId": obj.get("enrollmentId"),
            "individualId": obj.get("individualId"),
            "organizationId": obj.get("organizationId"),
            "receiverTenantId": obj.get("receiverTenantId"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "companyName": obj.get("companyName"),
            "billingEmail": obj.get("billingEmail"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "postalCode": obj.get("postalCode"),
            "countryId": obj.get("countryId"),
            "stateId": obj.get("stateId"),
            "cityId": obj.get("cityId"),
            "customerNotes": obj.get("customerNotes"),
            "forexRate": obj.get("forexRate"),
            "total": obj.get("total"),
            "totalTaxes": obj.get("totalTaxes"),
            "totalTaxBase": obj.get("totalTaxBase"),
            "totalDiscounts": obj.get("totalDiscounts"),
            "totalSurcharges": obj.get("totalSurcharges"),
            "totalGlobalDiscounts": obj.get("totalGlobalDiscounts"),
            "totalGlobalSurcharges": obj.get("totalGlobalSurcharges"),
            "totalTaxesInUsd": obj.get("totalTaxesInUsd"),
            "totalAmountInUsd": obj.get("totalAmountInUsd"),
            "totalProfitInUsd": obj.get("totalProfitInUsd"),
            "totalTaxBaseInUsd": obj.get("totalTaxBaseInUsd"),
            "totalDiscountsInUsd": obj.get("totalDiscountsInUsd"),
            "totalSurchargesInUsd": obj.get("totalSurchargesInUsd"),
            "totalDetailAmountInUsd": obj.get("totalDetailAmountInUsd"),
            "totalGlobalDiscountsInUsd": obj.get("totalGlobalDiscountsInUsd"),
            "totalGlobalSurchargesInUsd": obj.get("totalGlobalSurchargesInUsd"),
            "totalWithholdingTaxesInUsd": obj.get("totalWithholdingTaxesInUsd"),
            "totalShippingCostInUsd": obj.get("totalShippingCostInUsd"),
            "totalShippingTaxesInUsd": obj.get("totalShippingTaxesInUsd"),
            "currency": Currency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "totalInUsd": Money.from_dict(obj["totalInUsd"]) if obj.get("totalInUsd") is not None else None,
            "totalTaxAmountInUsd": Money.from_dict(obj["totalTaxAmountInUsd"]) if obj.get("totalTaxAmountInUsd") is not None else None,
            "totalTaxBaseAmountInUsd": Money.from_dict(obj["totalTaxBaseAmountInUsd"]) if obj.get("totalTaxBaseAmountInUsd") is not None else None,
            "totalDiscountsAmountInUsd": Money.from_dict(obj["totalDiscountsAmountInUsd"]) if obj.get("totalDiscountsAmountInUsd") is not None else None,
            "totalSurchargesAmountInUsd": Money.from_dict(obj["totalSurchargesAmountInUsd"]) if obj.get("totalSurchargesAmountInUsd") is not None else None,
            "totalGlobalDiscountsAmountInUsd": Money.from_dict(obj["totalGlobalDiscountsAmountInUsd"]) if obj.get("totalGlobalDiscountsAmountInUsd") is not None else None,
            "totalGlobalSurchargesAmountInUsd": Money.from_dict(obj["totalGlobalSurchargesAmountInUsd"]) if obj.get("totalGlobalSurchargesAmountInUsd") is not None else None,
            "totalAmount": Money.from_dict(obj["totalAmount"]) if obj.get("totalAmount") is not None else None,
            "totalTaxAmount": Money.from_dict(obj["totalTaxAmount"]) if obj.get("totalTaxAmount") is not None else None,
            "totalTaxBaseAmount": Money.from_dict(obj["totalTaxBaseAmount"]) if obj.get("totalTaxBaseAmount") is not None else None,
            "totalDiscountsAmount": Money.from_dict(obj["totalDiscountsAmount"]) if obj.get("totalDiscountsAmount") is not None else None,
            "totalSurchargesAmount": Money.from_dict(obj["totalSurchargesAmount"]) if obj.get("totalSurchargesAmount") is not None else None,
            "totalGlobalDiscountsAmount": Money.from_dict(obj["totalGlobalDiscountsAmount"]) if obj.get("totalGlobalDiscountsAmount") is not None else None,
            "totalGlobalSurchargesAmount": Money.from_dict(obj["totalGlobalSurchargesAmount"]) if obj.get("totalGlobalSurchargesAmount") is not None else None,
            "orderLinesCount": obj.get("orderLinesCount"),
            "quoteId": obj.get("quoteId"),
            "walletId": obj.get("walletId"),
            "paymentTermId": obj.get("paymentTermId"),
            "parentOrderId": obj.get("parentOrderId"),
            "shippingMethodId": obj.get("shippingMethodId"),
            "billingLocationId": obj.get("billingLocationId"),
            "shippingLocationId": obj.get("shippingLocationId"),
            "qualifiedIdentifier": obj.get("qualifiedIdentifier"),
            "costCalculationMethod": obj.get("costCalculationMethod"),
            "freightTerms": obj.get("freightTerms"),
            "orderStatus": obj.get("orderStatus"),
            "requestedDeliveryDate": obj.get("requestedDeliveryDate"),
            "customTaxAmount": obj.get("customTaxAmount"),
            "customTotalAmount": obj.get("customTotalAmount"),
            "customDetailAmount": obj.get("customDetailAmount"),
            "customProfitAmount": obj.get("customProfitAmount"),
            "customDiscountsAmount": obj.get("customDiscountsAmount"),
            "customSurchargesAmount": obj.get("customSurchargesAmount"),
            "customShippingTaxAmount": obj.get("customShippingTaxAmount"),
            "customShippingCostAmount": obj.get("customShippingCostAmount"),
            "customWithholdingTaxAmount": obj.get("customWithholdingTaxAmount"),
            "user": UserDto.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "tenant": TenantDto.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "individual": ContactDto.from_dict(obj["individual"]) if obj.get("individual") is not None else None,
            "organization": ContactDto.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "receiverTenant": TenantDto.from_dict(obj["receiverTenant"]) if obj.get("receiverTenant") is not None else None,
            "enrollment": TenantEnrolmentDto.from_dict(obj["enrollment"]) if obj.get("enrollment") is not None else None
        })
        return _obj


