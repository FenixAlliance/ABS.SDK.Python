# coding: utf-8

"""
    WalletsService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class PaymentDto(BaseModel):
    """
    PaymentDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    time_stamp: Optional[datetime] = Field(default=None, alias="timeStamp")
    test: Optional[StrictBool] = None
    invoice_id: Optional[StrictStr] = Field(default=None, alias="invoiceId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    emisor_wallet_id: Optional[StrictStr] = Field(default=None, alias="emisorWalletId")
    receiver_wallet_id: Optional[StrictStr] = Field(default=None, alias="receiverWalletId")
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    forex_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="forexRate")
    total_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalCost")
    total_taxes: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxes")
    closed: Optional[StrictBool] = None
    data: Optional[StrictStr] = None
    data_label: Optional[StrictStr] = Field(default=None, alias="dataLabel")
    data1: Optional[StrictStr] = None
    data1_label: Optional[StrictStr] = Field(default=None, alias="data1Label")
    response: Optional[StrictStr] = None
    authorization: Optional[StrictStr] = None
    reference_code: Optional[StrictStr] = Field(default=None, alias="referenceCode")
    correlation_code: Optional[StrictStr] = Field(default=None, alias="correlationCode")
    last_updated: Optional[datetime] = Field(default=None, alias="lastUpdated")
    on_behalf_of: Optional[StrictInt] = Field(default=None, alias="onBehalfOf")
    payment_type: Optional[StrictInt] = Field(default=None, alias="paymentType")
    payment_status: Optional[StrictInt] = Field(default=None, alias="paymentStatus")
    base_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseCost")
    signature: Optional[StrictStr] = None
    signature_mismatch: Optional[StrictBool] = Field(default=None, alias="signatureMismatch")
    is_external: Optional[StrictBool] = Field(default=None, alias="isExternal")
    marked_for_revision: Optional[StrictBool] = Field(default=None, alias="markedForRevision")
    forex_rates_snapshot: Optional[StrictStr] = Field(default=None, alias="forexRatesSnapshot")
    official_id: Optional[StrictStr] = Field(default=None, alias="officialId")
    official_id_expedition_date: Optional[datetime] = Field(default=None, alias="officialIdExpeditionDate")
    fiscal_identification_type_id: Optional[StrictStr] = Field(default=None, alias="fiscalIdentificationTypeId")
    billing_address: Optional[StrictStr] = Field(default=None, alias="billingAddress")
    phone: Optional[StrictStr] = None
    cellphone: Optional[StrictStr] = None
    department: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    country_id: Optional[StrictStr] = Field(default=None, alias="countryId")
    location_id: Optional[StrictStr] = Field(default=None, alias="locationId")
    entitlement_id: Optional[StrictStr] = Field(default=None, alias="entitlementId")
    anti_fraud_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="antiFraudScore")
    call_record_url: Optional[StrictStr] = Field(default=None, alias="callRecordURL")
    called: Optional[StrictBool] = None
    verified: Optional[StrictBool] = None
    payer_picture_timestamp: Optional[StrictStr] = Field(default=None, alias="payerPictureTimestamp")
    payer_picture: Optional[StrictStr] = Field(default=None, alias="payerPicture")
    identification_picture_timestamp: Optional[StrictStr] = Field(default=None, alias="identificationPictureTimestamp")
    identification_picture: Optional[StrictStr] = Field(default=None, alias="identificationPicture")
    identification_back_picture: Optional[StrictStr] = Field(default=None, alias="identificationBackPicture")
    identification_back_picture_timestamp: Optional[StrictStr] = Field(default=None, alias="identificationBackPictureTimestamp")
    ip_lookup_id: Optional[StrictStr] = Field(default=None, alias="ipLookupId")
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    accounting_entry_id: Optional[StrictStr] = Field(default=None, alias="accountingEntryId")
    payment_gateway_id: Optional[StrictStr] = Field(default=None, alias="paymentGatewayId")
    bank_account_id: Optional[StrictStr] = Field(default=None, alias="bankAccountId")
    enrolment_id: Optional[StrictStr] = Field(default=None, alias="enrolmentId")
    bank_id: Optional[StrictStr] = Field(default=None, alias="bankId")
    payment_token_id: Optional[StrictStr] = Field(default=None, alias="paymentTokenId")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "timeStamp", "test", "invoiceId", "tenantId", "emisorWalletId", "receiverWalletId", "currencyId", "forexRate", "totalCost", "totalTaxes", "closed", "data", "dataLabel", "data1", "data1Label", "response", "authorization", "referenceCode", "correlationCode", "lastUpdated", "onBehalfOf", "paymentType", "paymentStatus", "baseCost", "signature", "signatureMismatch", "isExternal", "markedForRevision", "forexRatesSnapshot", "officialId", "officialIdExpeditionDate", "fiscalIdentificationTypeId", "billingAddress", "phone", "cellphone", "department", "city", "countryId", "locationId", "entitlementId", "antiFraudScore", "callRecordURL", "called", "verified", "payerPictureTimestamp", "payerPicture", "identificationPictureTimestamp", "identificationPicture", "identificationBackPicture", "identificationBackPictureTimestamp", "ipLookupId", "orderId", "accountingEntryId", "paymentGatewayId", "bankAccountId", "enrolmentId", "bankId", "paymentTokenId"]

    @field_validator('on_behalf_of')
    def on_behalf_of_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3]):
            raise ValueError("must be one of enum values (0, 1, 2, 3)")
        return value

    @field_validator('payment_type')
    def payment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    @field_validator('payment_status')
    def payment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoiceId'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if emisor_wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.emisor_wallet_id is None and "emisor_wallet_id" in self.model_fields_set:
            _dict['emisorWalletId'] = None

        # set to None if receiver_wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.receiver_wallet_id is None and "receiver_wallet_id" in self.model_fields_set:
            _dict['receiverWalletId'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        # set to None if data_label (nullable) is None
        # and model_fields_set contains the field
        if self.data_label is None and "data_label" in self.model_fields_set:
            _dict['dataLabel'] = None

        # set to None if data1 (nullable) is None
        # and model_fields_set contains the field
        if self.data1 is None and "data1" in self.model_fields_set:
            _dict['data1'] = None

        # set to None if data1_label (nullable) is None
        # and model_fields_set contains the field
        if self.data1_label is None and "data1_label" in self.model_fields_set:
            _dict['data1Label'] = None

        # set to None if response (nullable) is None
        # and model_fields_set contains the field
        if self.response is None and "response" in self.model_fields_set:
            _dict['response'] = None

        # set to None if authorization (nullable) is None
        # and model_fields_set contains the field
        if self.authorization is None and "authorization" in self.model_fields_set:
            _dict['authorization'] = None

        # set to None if reference_code (nullable) is None
        # and model_fields_set contains the field
        if self.reference_code is None and "reference_code" in self.model_fields_set:
            _dict['referenceCode'] = None

        # set to None if correlation_code (nullable) is None
        # and model_fields_set contains the field
        if self.correlation_code is None and "correlation_code" in self.model_fields_set:
            _dict['correlationCode'] = None

        # set to None if signature (nullable) is None
        # and model_fields_set contains the field
        if self.signature is None and "signature" in self.model_fields_set:
            _dict['signature'] = None

        # set to None if forex_rates_snapshot (nullable) is None
        # and model_fields_set contains the field
        if self.forex_rates_snapshot is None and "forex_rates_snapshot" in self.model_fields_set:
            _dict['forexRatesSnapshot'] = None

        # set to None if official_id (nullable) is None
        # and model_fields_set contains the field
        if self.official_id is None and "official_id" in self.model_fields_set:
            _dict['officialId'] = None

        # set to None if fiscal_identification_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.fiscal_identification_type_id is None and "fiscal_identification_type_id" in self.model_fields_set:
            _dict['fiscalIdentificationTypeId'] = None

        # set to None if billing_address (nullable) is None
        # and model_fields_set contains the field
        if self.billing_address is None and "billing_address" in self.model_fields_set:
            _dict['billingAddress'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if cellphone (nullable) is None
        # and model_fields_set contains the field
        if self.cellphone is None and "cellphone" in self.model_fields_set:
            _dict['cellphone'] = None

        # set to None if department (nullable) is None
        # and model_fields_set contains the field
        if self.department is None and "department" in self.model_fields_set:
            _dict['department'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if country_id (nullable) is None
        # and model_fields_set contains the field
        if self.country_id is None and "country_id" in self.model_fields_set:
            _dict['countryId'] = None

        # set to None if location_id (nullable) is None
        # and model_fields_set contains the field
        if self.location_id is None and "location_id" in self.model_fields_set:
            _dict['locationId'] = None

        # set to None if entitlement_id (nullable) is None
        # and model_fields_set contains the field
        if self.entitlement_id is None and "entitlement_id" in self.model_fields_set:
            _dict['entitlementId'] = None

        # set to None if call_record_url (nullable) is None
        # and model_fields_set contains the field
        if self.call_record_url is None and "call_record_url" in self.model_fields_set:
            _dict['callRecordURL'] = None

        # set to None if payer_picture_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.payer_picture_timestamp is None and "payer_picture_timestamp" in self.model_fields_set:
            _dict['payerPictureTimestamp'] = None

        # set to None if payer_picture (nullable) is None
        # and model_fields_set contains the field
        if self.payer_picture is None and "payer_picture" in self.model_fields_set:
            _dict['payerPicture'] = None

        # set to None if identification_picture_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.identification_picture_timestamp is None and "identification_picture_timestamp" in self.model_fields_set:
            _dict['identificationPictureTimestamp'] = None

        # set to None if identification_picture (nullable) is None
        # and model_fields_set contains the field
        if self.identification_picture is None and "identification_picture" in self.model_fields_set:
            _dict['identificationPicture'] = None

        # set to None if identification_back_picture (nullable) is None
        # and model_fields_set contains the field
        if self.identification_back_picture is None and "identification_back_picture" in self.model_fields_set:
            _dict['identificationBackPicture'] = None

        # set to None if identification_back_picture_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.identification_back_picture_timestamp is None and "identification_back_picture_timestamp" in self.model_fields_set:
            _dict['identificationBackPictureTimestamp'] = None

        # set to None if ip_lookup_id (nullable) is None
        # and model_fields_set contains the field
        if self.ip_lookup_id is None and "ip_lookup_id" in self.model_fields_set:
            _dict['ipLookupId'] = None

        # set to None if order_id (nullable) is None
        # and model_fields_set contains the field
        if self.order_id is None and "order_id" in self.model_fields_set:
            _dict['orderId'] = None

        # set to None if accounting_entry_id (nullable) is None
        # and model_fields_set contains the field
        if self.accounting_entry_id is None and "accounting_entry_id" in self.model_fields_set:
            _dict['accountingEntryId'] = None

        # set to None if payment_gateway_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_gateway_id is None and "payment_gateway_id" in self.model_fields_set:
            _dict['paymentGatewayId'] = None

        # set to None if bank_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.bank_account_id is None and "bank_account_id" in self.model_fields_set:
            _dict['bankAccountId'] = None

        # set to None if enrolment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrolment_id is None and "enrolment_id" in self.model_fields_set:
            _dict['enrolmentId'] = None

        # set to None if bank_id (nullable) is None
        # and model_fields_set contains the field
        if self.bank_id is None and "bank_id" in self.model_fields_set:
            _dict['bankId'] = None

        # set to None if payment_token_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_token_id is None and "payment_token_id" in self.model_fields_set:
            _dict['paymentTokenId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "timeStamp": obj.get("timeStamp"),
            "test": obj.get("test"),
            "invoiceId": obj.get("invoiceId"),
            "tenantId": obj.get("tenantId"),
            "emisorWalletId": obj.get("emisorWalletId"),
            "receiverWalletId": obj.get("receiverWalletId"),
            "currencyId": obj.get("currencyId"),
            "forexRate": obj.get("forexRate"),
            "totalCost": obj.get("totalCost"),
            "totalTaxes": obj.get("totalTaxes"),
            "closed": obj.get("closed"),
            "data": obj.get("data"),
            "dataLabel": obj.get("dataLabel"),
            "data1": obj.get("data1"),
            "data1Label": obj.get("data1Label"),
            "response": obj.get("response"),
            "authorization": obj.get("authorization"),
            "referenceCode": obj.get("referenceCode"),
            "correlationCode": obj.get("correlationCode"),
            "lastUpdated": obj.get("lastUpdated"),
            "onBehalfOf": obj.get("onBehalfOf"),
            "paymentType": obj.get("paymentType"),
            "paymentStatus": obj.get("paymentStatus"),
            "baseCost": obj.get("baseCost"),
            "signature": obj.get("signature"),
            "signatureMismatch": obj.get("signatureMismatch"),
            "isExternal": obj.get("isExternal"),
            "markedForRevision": obj.get("markedForRevision"),
            "forexRatesSnapshot": obj.get("forexRatesSnapshot"),
            "officialId": obj.get("officialId"),
            "officialIdExpeditionDate": obj.get("officialIdExpeditionDate"),
            "fiscalIdentificationTypeId": obj.get("fiscalIdentificationTypeId"),
            "billingAddress": obj.get("billingAddress"),
            "phone": obj.get("phone"),
            "cellphone": obj.get("cellphone"),
            "department": obj.get("department"),
            "city": obj.get("city"),
            "countryId": obj.get("countryId"),
            "locationId": obj.get("locationId"),
            "entitlementId": obj.get("entitlementId"),
            "antiFraudScore": obj.get("antiFraudScore"),
            "callRecordURL": obj.get("callRecordURL"),
            "called": obj.get("called"),
            "verified": obj.get("verified"),
            "payerPictureTimestamp": obj.get("payerPictureTimestamp"),
            "payerPicture": obj.get("payerPicture"),
            "identificationPictureTimestamp": obj.get("identificationPictureTimestamp"),
            "identificationPicture": obj.get("identificationPicture"),
            "identificationBackPicture": obj.get("identificationBackPicture"),
            "identificationBackPictureTimestamp": obj.get("identificationBackPictureTimestamp"),
            "ipLookupId": obj.get("ipLookupId"),
            "orderId": obj.get("orderId"),
            "accountingEntryId": obj.get("accountingEntryId"),
            "paymentGatewayId": obj.get("paymentGatewayId"),
            "bankAccountId": obj.get("bankAccountId"),
            "enrolmentId": obj.get("enrolmentId"),
            "bankId": obj.get("bankId"),
            "paymentTokenId": obj.get("paymentTokenId")
        })
        return _obj


