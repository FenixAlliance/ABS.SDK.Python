# coding: utf-8

"""
    MarketingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EmailTemplateDto(BaseModel):
    """
    EmailTemplateDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    order: Optional[StrictInt] = None
    slug: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    excerpt: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    highlight_image: Optional[StrictStr] = Field(default=None, alias="highlightImage")
    canonical_url: Optional[StrictStr] = Field(default=None, alias="canonicalUrl")
    seo_title: Optional[StrictStr] = Field(default=None, alias="seoTitle")
    seo_key_words: Optional[StrictStr] = Field(default=None, alias="seoKeyWords")
    seo_key_phrases: Optional[StrictStr] = Field(default=None, alias="seoKeyPhrases")
    meta_description: Optional[StrictStr] = Field(default=None, alias="metaDescription")
    twitter_image: Optional[StrictStr] = Field(default=None, alias="twitterImage")
    twitter_title: Optional[StrictStr] = Field(default=None, alias="twitterTitle")
    twitter_description: Optional[StrictStr] = Field(default=None, alias="twitterDescription")
    facebook_image: Optional[StrictStr] = Field(default=None, alias="facebookImage")
    facebook_title: Optional[StrictStr] = Field(default=None, alias="facebookTitle")
    facebook_description: Optional[StrictStr] = Field(default=None, alias="facebookDescription")
    featured_image_url: Optional[StrictStr] = Field(default=None, alias="featuredImageUrl")
    content: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    namespace: Optional[StrictStr] = None
    type_name: Optional[StrictStr] = Field(default=None, alias="typeName")
    generated_code: Optional[StrictStr] = Field(default=None, alias="generatedCode")
    compilation_path: Optional[StrictStr] = Field(default=None, alias="compilationPath")
    html_content: Optional[StrictStr] = Field(default=None, alias="htmlContent")
    c_sharp_content: Optional[StrictStr] = Field(default=None, alias="cSharpContent")
    razor_content: Optional[StrictStr] = Field(default=None, alias="razorContent")
    css_content: Optional[StrictStr] = Field(default=None, alias="cssContent")
    js_content: Optional[StrictStr] = Field(default=None, alias="jsContent")
    css_files: Optional[StrictStr] = Field(default=None, alias="cssFiles")
    js_files: Optional[StrictStr] = Field(default=None, alias="jsFiles")
    razor_generated_code: Optional[StrictStr] = Field(default=None, alias="razorGeneratedCode")
    c_sharp_generated_code: Optional[StrictStr] = Field(default=None, alias="cSharpGeneratedCode")
    template: Optional[StrictBool] = None
    default: Optional[StrictBool] = None
    enable: Optional[StrictBool] = None
    enable_comments: Optional[StrictBool] = Field(default=None, alias="enableComments")
    display_social_box: Optional[StrictBool] = Field(default=None, alias="displaySocialBox")
    published: Optional[StrictBool] = None
    in_trash_can: Optional[StrictBool] = Field(default=None, alias="inTrashCan")
    system_locked: Optional[StrictBool] = Field(default=None, alias="systemLocked")
    allow_ping_backs: Optional[StrictBool] = Field(default=None, alias="allowPingBacks")
    allow_trackbacks: Optional[StrictBool] = Field(default=None, alias="allowTrackbacks")
    cornerstone_content: Optional[StrictBool] = Field(default=None, alias="cornerstoneContent")
    is_essential_content: Optional[StrictBool] = Field(default=None, alias="isEssentialContent")
    allow_search_engine_indexing: Optional[StrictBool] = Field(default=None, alias="allowSearchEngineIndexing")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    web_portal_id: Optional[StrictStr] = Field(default=None, alias="webPortalId")
    website_theme_id: Optional[StrictStr] = Field(default=None, alias="websiteThemeId")
    enrollment_id: Optional[StrictStr] = Field(default=None, alias="enrollmentId")
    social_profile_id: Optional[StrictStr] = Field(default=None, alias="socialProfileId")
    parent_web_content_id: Optional[StrictStr] = Field(default=None, alias="parentWebContentId")
    parent_web_content_version_id: Optional[StrictStr] = Field(default=None, alias="parentWebContentVersionId")
    marketing_campaign_id: Optional[StrictStr] = Field(default=None, alias="marketingCampaignId")
    marketing_campaign_name: Optional[StrictStr] = Field(default=None, alias="marketingCampaignName")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "order", "slug", "name", "title", "excerpt", "password", "description", "highlightImage", "canonicalUrl", "seoTitle", "seoKeyWords", "seoKeyPhrases", "metaDescription", "twitterImage", "twitterTitle", "twitterDescription", "facebookImage", "facebookTitle", "facebookDescription", "featuredImageUrl", "content", "code", "namespace", "typeName", "generatedCode", "compilationPath", "htmlContent", "cSharpContent", "razorContent", "cssContent", "jsContent", "cssFiles", "jsFiles", "razorGeneratedCode", "cSharpGeneratedCode", "template", "default", "enable", "enableComments", "displaySocialBox", "published", "inTrashCan", "systemLocked", "allowPingBacks", "allowTrackbacks", "cornerstoneContent", "isEssentialContent", "allowSearchEngineIndexing", "tenantId", "webPortalId", "websiteThemeId", "enrollmentId", "socialProfileId", "parentWebContentId", "parentWebContentVersionId", "marketingCampaignId", "marketingCampaignName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EmailTemplateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if slug (nullable) is None
        # and model_fields_set contains the field
        if self.slug is None and "slug" in self.model_fields_set:
            _dict['slug'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if excerpt (nullable) is None
        # and model_fields_set contains the field
        if self.excerpt is None and "excerpt" in self.model_fields_set:
            _dict['excerpt'] = None

        # set to None if password (nullable) is None
        # and model_fields_set contains the field
        if self.password is None and "password" in self.model_fields_set:
            _dict['password'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if highlight_image (nullable) is None
        # and model_fields_set contains the field
        if self.highlight_image is None and "highlight_image" in self.model_fields_set:
            _dict['highlightImage'] = None

        # set to None if canonical_url (nullable) is None
        # and model_fields_set contains the field
        if self.canonical_url is None and "canonical_url" in self.model_fields_set:
            _dict['canonicalUrl'] = None

        # set to None if seo_title (nullable) is None
        # and model_fields_set contains the field
        if self.seo_title is None and "seo_title" in self.model_fields_set:
            _dict['seoTitle'] = None

        # set to None if seo_key_words (nullable) is None
        # and model_fields_set contains the field
        if self.seo_key_words is None and "seo_key_words" in self.model_fields_set:
            _dict['seoKeyWords'] = None

        # set to None if seo_key_phrases (nullable) is None
        # and model_fields_set contains the field
        if self.seo_key_phrases is None and "seo_key_phrases" in self.model_fields_set:
            _dict['seoKeyPhrases'] = None

        # set to None if meta_description (nullable) is None
        # and model_fields_set contains the field
        if self.meta_description is None and "meta_description" in self.model_fields_set:
            _dict['metaDescription'] = None

        # set to None if twitter_image (nullable) is None
        # and model_fields_set contains the field
        if self.twitter_image is None and "twitter_image" in self.model_fields_set:
            _dict['twitterImage'] = None

        # set to None if twitter_title (nullable) is None
        # and model_fields_set contains the field
        if self.twitter_title is None and "twitter_title" in self.model_fields_set:
            _dict['twitterTitle'] = None

        # set to None if twitter_description (nullable) is None
        # and model_fields_set contains the field
        if self.twitter_description is None and "twitter_description" in self.model_fields_set:
            _dict['twitterDescription'] = None

        # set to None if facebook_image (nullable) is None
        # and model_fields_set contains the field
        if self.facebook_image is None and "facebook_image" in self.model_fields_set:
            _dict['facebookImage'] = None

        # set to None if facebook_title (nullable) is None
        # and model_fields_set contains the field
        if self.facebook_title is None and "facebook_title" in self.model_fields_set:
            _dict['facebookTitle'] = None

        # set to None if facebook_description (nullable) is None
        # and model_fields_set contains the field
        if self.facebook_description is None and "facebook_description" in self.model_fields_set:
            _dict['facebookDescription'] = None

        # set to None if featured_image_url (nullable) is None
        # and model_fields_set contains the field
        if self.featured_image_url is None and "featured_image_url" in self.model_fields_set:
            _dict['featuredImageUrl'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if namespace (nullable) is None
        # and model_fields_set contains the field
        if self.namespace is None and "namespace" in self.model_fields_set:
            _dict['namespace'] = None

        # set to None if type_name (nullable) is None
        # and model_fields_set contains the field
        if self.type_name is None and "type_name" in self.model_fields_set:
            _dict['typeName'] = None

        # set to None if generated_code (nullable) is None
        # and model_fields_set contains the field
        if self.generated_code is None and "generated_code" in self.model_fields_set:
            _dict['generatedCode'] = None

        # set to None if compilation_path (nullable) is None
        # and model_fields_set contains the field
        if self.compilation_path is None and "compilation_path" in self.model_fields_set:
            _dict['compilationPath'] = None

        # set to None if html_content (nullable) is None
        # and model_fields_set contains the field
        if self.html_content is None and "html_content" in self.model_fields_set:
            _dict['htmlContent'] = None

        # set to None if c_sharp_content (nullable) is None
        # and model_fields_set contains the field
        if self.c_sharp_content is None and "c_sharp_content" in self.model_fields_set:
            _dict['cSharpContent'] = None

        # set to None if razor_content (nullable) is None
        # and model_fields_set contains the field
        if self.razor_content is None and "razor_content" in self.model_fields_set:
            _dict['razorContent'] = None

        # set to None if css_content (nullable) is None
        # and model_fields_set contains the field
        if self.css_content is None and "css_content" in self.model_fields_set:
            _dict['cssContent'] = None

        # set to None if js_content (nullable) is None
        # and model_fields_set contains the field
        if self.js_content is None and "js_content" in self.model_fields_set:
            _dict['jsContent'] = None

        # set to None if css_files (nullable) is None
        # and model_fields_set contains the field
        if self.css_files is None and "css_files" in self.model_fields_set:
            _dict['cssFiles'] = None

        # set to None if js_files (nullable) is None
        # and model_fields_set contains the field
        if self.js_files is None and "js_files" in self.model_fields_set:
            _dict['jsFiles'] = None

        # set to None if razor_generated_code (nullable) is None
        # and model_fields_set contains the field
        if self.razor_generated_code is None and "razor_generated_code" in self.model_fields_set:
            _dict['razorGeneratedCode'] = None

        # set to None if c_sharp_generated_code (nullable) is None
        # and model_fields_set contains the field
        if self.c_sharp_generated_code is None and "c_sharp_generated_code" in self.model_fields_set:
            _dict['cSharpGeneratedCode'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if web_portal_id (nullable) is None
        # and model_fields_set contains the field
        if self.web_portal_id is None and "web_portal_id" in self.model_fields_set:
            _dict['webPortalId'] = None

        # set to None if website_theme_id (nullable) is None
        # and model_fields_set contains the field
        if self.website_theme_id is None and "website_theme_id" in self.model_fields_set:
            _dict['websiteThemeId'] = None

        # set to None if enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrollment_id is None and "enrollment_id" in self.model_fields_set:
            _dict['enrollmentId'] = None

        # set to None if social_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.social_profile_id is None and "social_profile_id" in self.model_fields_set:
            _dict['socialProfileId'] = None

        # set to None if parent_web_content_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_web_content_id is None and "parent_web_content_id" in self.model_fields_set:
            _dict['parentWebContentId'] = None

        # set to None if parent_web_content_version_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_web_content_version_id is None and "parent_web_content_version_id" in self.model_fields_set:
            _dict['parentWebContentVersionId'] = None

        # set to None if marketing_campaign_id (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_campaign_id is None and "marketing_campaign_id" in self.model_fields_set:
            _dict['marketingCampaignId'] = None

        # set to None if marketing_campaign_name (nullable) is None
        # and model_fields_set contains the field
        if self.marketing_campaign_name is None and "marketing_campaign_name" in self.model_fields_set:
            _dict['marketingCampaignName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EmailTemplateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "order": obj.get("order"),
            "slug": obj.get("slug"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "excerpt": obj.get("excerpt"),
            "password": obj.get("password"),
            "description": obj.get("description"),
            "highlightImage": obj.get("highlightImage"),
            "canonicalUrl": obj.get("canonicalUrl"),
            "seoTitle": obj.get("seoTitle"),
            "seoKeyWords": obj.get("seoKeyWords"),
            "seoKeyPhrases": obj.get("seoKeyPhrases"),
            "metaDescription": obj.get("metaDescription"),
            "twitterImage": obj.get("twitterImage"),
            "twitterTitle": obj.get("twitterTitle"),
            "twitterDescription": obj.get("twitterDescription"),
            "facebookImage": obj.get("facebookImage"),
            "facebookTitle": obj.get("facebookTitle"),
            "facebookDescription": obj.get("facebookDescription"),
            "featuredImageUrl": obj.get("featuredImageUrl"),
            "content": obj.get("content"),
            "code": obj.get("code"),
            "namespace": obj.get("namespace"),
            "typeName": obj.get("typeName"),
            "generatedCode": obj.get("generatedCode"),
            "compilationPath": obj.get("compilationPath"),
            "htmlContent": obj.get("htmlContent"),
            "cSharpContent": obj.get("cSharpContent"),
            "razorContent": obj.get("razorContent"),
            "cssContent": obj.get("cssContent"),
            "jsContent": obj.get("jsContent"),
            "cssFiles": obj.get("cssFiles"),
            "jsFiles": obj.get("jsFiles"),
            "razorGeneratedCode": obj.get("razorGeneratedCode"),
            "cSharpGeneratedCode": obj.get("cSharpGeneratedCode"),
            "template": obj.get("template"),
            "default": obj.get("default"),
            "enable": obj.get("enable"),
            "enableComments": obj.get("enableComments"),
            "displaySocialBox": obj.get("displaySocialBox"),
            "published": obj.get("published"),
            "inTrashCan": obj.get("inTrashCan"),
            "systemLocked": obj.get("systemLocked"),
            "allowPingBacks": obj.get("allowPingBacks"),
            "allowTrackbacks": obj.get("allowTrackbacks"),
            "cornerstoneContent": obj.get("cornerstoneContent"),
            "isEssentialContent": obj.get("isEssentialContent"),
            "allowSearchEngineIndexing": obj.get("allowSearchEngineIndexing"),
            "tenantId": obj.get("tenantId"),
            "webPortalId": obj.get("webPortalId"),
            "websiteThemeId": obj.get("websiteThemeId"),
            "enrollmentId": obj.get("enrollmentId"),
            "socialProfileId": obj.get("socialProfileId"),
            "parentWebContentId": obj.get("parentWebContentId"),
            "parentWebContentVersionId": obj.get("parentWebContentVersionId"),
            "marketingCampaignId": obj.get("marketingCampaignId"),
            "marketingCampaignName": obj.get("marketingCampaignName")
        })
        return _obj


