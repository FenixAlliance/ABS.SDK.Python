# coding: utf-8

"""
    MarketingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class MarketingListDto(BaseModel):
    """
    MarketingListDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    locked: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    purpose: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    cost: Optional[Union[StrictFloat, StrictInt]] = None
    modified_on: Optional[datetime] = Field(default=None, alias="modifiedOn")
    last_used_on: Optional[datetime] = Field(default=None, alias="lastUsedOn")
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    enrolment_id: Optional[StrictStr] = Field(default=None, alias="enrolmentId")
    marketing_list_type: Optional[StrictInt] = Field(default=None, alias="marketingListType")
    marketing_list_target: Optional[StrictInt] = Field(default=None, alias="marketingListTarget")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "locked", "name", "purpose", "description", "source", "cost", "modifiedOn", "lastUsedOn", "currencyId", "tenantId", "enrolmentId", "marketingListType", "marketingListTarget"]

    @field_validator('marketing_list_type')
    def marketing_list_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    @field_validator('marketing_list_target')
    def marketing_list_target_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketingListDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if purpose (nullable) is None
        # and model_fields_set contains the field
        if self.purpose is None and "purpose" in self.model_fields_set:
            _dict['purpose'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if source (nullable) is None
        # and model_fields_set contains the field
        if self.source is None and "source" in self.model_fields_set:
            _dict['source'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if enrolment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrolment_id is None and "enrolment_id" in self.model_fields_set:
            _dict['enrolmentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketingListDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "locked": obj.get("locked"),
            "name": obj.get("name"),
            "purpose": obj.get("purpose"),
            "description": obj.get("description"),
            "source": obj.get("source"),
            "cost": obj.get("cost"),
            "modifiedOn": obj.get("modifiedOn"),
            "lastUsedOn": obj.get("lastUsedOn"),
            "currencyId": obj.get("currencyId"),
            "tenantId": obj.get("tenantId"),
            "enrolmentId": obj.get("enrolmentId"),
            "marketingListType": obj.get("marketingListType"),
            "marketingListTarget": obj.get("marketingListTarget")
        })
        return _obj


