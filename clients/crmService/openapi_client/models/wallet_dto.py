# coding: utf-8

"""
    CrmService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class WalletDto(BaseModel):
    """
    WalletDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    crypto_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="cryptoBalance")
    test_mode: Optional[StrictBool] = Field(default=None, alias="testMode")
    verified: Optional[StrictBool] = None
    type: Optional[StrictStr] = None
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    forex_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="forexRate")
    balance_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="balanceInUsd")
    main_net_ether_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="mainNetEtherBalance")
    ethereum_address: Optional[StrictStr] = Field(default=None, alias="ethereumAddress")
    ethereum_public_key: Optional[StrictStr] = Field(default=None, alias="ethereumPublicKey")
    ethereum_private_key: Optional[StrictStr] = Field(default=None, alias="ethereumPrivateKey")
    rolling_reserve_percent: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="rollingReservePercent")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "balance", "cryptoBalance", "testMode", "verified", "type", "currencyId", "forexRate", "balanceInUsd", "mainNetEtherBalance", "ethereumAddress", "ethereumPublicKey", "ethereumPrivateKey", "rollingReservePercent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WalletDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if ethereum_address (nullable) is None
        # and model_fields_set contains the field
        if self.ethereum_address is None and "ethereum_address" in self.model_fields_set:
            _dict['ethereumAddress'] = None

        # set to None if ethereum_public_key (nullable) is None
        # and model_fields_set contains the field
        if self.ethereum_public_key is None and "ethereum_public_key" in self.model_fields_set:
            _dict['ethereumPublicKey'] = None

        # set to None if ethereum_private_key (nullable) is None
        # and model_fields_set contains the field
        if self.ethereum_private_key is None and "ethereum_private_key" in self.model_fields_set:
            _dict['ethereumPrivateKey'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WalletDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "balance": obj.get("balance"),
            "cryptoBalance": obj.get("cryptoBalance"),
            "testMode": obj.get("testMode"),
            "verified": obj.get("verified"),
            "type": obj.get("type"),
            "currencyId": obj.get("currencyId"),
            "forexRate": obj.get("forexRate"),
            "balanceInUsd": obj.get("balanceInUsd"),
            "mainNetEtherBalance": obj.get("mainNetEtherBalance"),
            "ethereumAddress": obj.get("ethereumAddress"),
            "ethereumPublicKey": obj.get("ethereumPublicKey"),
            "ethereumPrivateKey": obj.get("ethereumPrivateKey"),
            "rollingReservePercent": obj.get("rollingReservePercent")
        })
        return _obj


