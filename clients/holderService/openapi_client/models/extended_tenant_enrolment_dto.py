# coding: utf-8

"""
    HolderService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.tenant_dto import TenantDto
from openapi_client.models.user_dto import UserDto
from typing import Optional, Set
from typing_extensions import Self

class ExtendedTenantEnrolmentDto(BaseModel):
    """
    ExtendedTenantEnrolmentDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    is_root: Optional[StrictBool] = Field(default=None, alias="isRoot")
    is_owner: Optional[StrictBool] = Field(default=None, alias="isOwner")
    is_admin: Optional[StrictBool] = Field(default=None, alias="isAdmin")
    is_disabled: Optional[StrictBool] = Field(default=None, alias="isDisabled")
    tenant: Optional[TenantDto] = None
    user: Optional[UserDto] = None
    __properties: ClassVar[List[str]] = ["id", "timestamp", "tenantId", "userId", "isRoot", "isOwner", "isAdmin", "isDisabled", "tenant", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedTenantEnrolmentDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tenant
        if self.tenant:
            _dict['tenant'] = self.tenant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedTenantEnrolmentDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "tenantId": obj.get("tenantId"),
            "userId": obj.get("userId"),
            "isRoot": obj.get("isRoot"),
            "isOwner": obj.get("isOwner"),
            "isAdmin": obj.get("isAdmin"),
            "isDisabled": obj.get("isDisabled"),
            "tenant": TenantDto.from_dict(obj["tenant"]) if obj.get("tenant") is not None else None,
            "user": UserDto.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj


