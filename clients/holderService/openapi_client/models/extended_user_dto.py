# coding: utf-8

"""
    HolderService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cart_dto import CartDto
from openapi_client.models.social_profile_dto import SocialProfileDto
from openapi_client.models.user_settings_dto import UserSettingsDto
from openapi_client.models.wallet_dto import WalletDto
from typing import Optional, Set
from typing_extensions import Self

class ExtendedUserDto(BaseModel):
    """
    ExtendedUserDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    qualified_name: Optional[StrictStr] = Field(default=None, alias="qualifiedName")
    public_name: Optional[StrictStr] = Field(default=None, alias="publicName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    cover_url: Optional[StrictStr] = Field(default=None, alias="coverUrl")
    avatar_url: Optional[StrictStr] = Field(default=None, alias="avatarUrl")
    git_hub_url: Optional[StrictStr] = Field(default=None, alias="gitHubUrl")
    country_id: Optional[StrictStr] = Field(default=None, alias="countryId")
    timezone_id: Optional[StrictStr] = Field(default=None, alias="timezoneId")
    website_url: Optional[StrictStr] = Field(default=None, alias="websiteUrl")
    twitter_url: Optional[StrictStr] = Field(default=None, alias="twitterUrl")
    you_tube_url: Optional[StrictStr] = Field(default=None, alias="youTubeUrl")
    linked_in_url: Optional[StrictStr] = Field(default=None, alias="linkedInUrl")
    facebook_url: Optional[StrictStr] = Field(default=None, alias="facebookUrl")
    instagram_url: Optional[StrictStr] = Field(default=None, alias="instagramUrl")
    social_profile_id: Optional[StrictStr] = Field(default=None, alias="socialProfileId")
    birthday: Optional[datetime] = None
    id_provider: Optional[StrictStr] = Field(default=None, alias="idProvider")
    language_id: Optional[StrictStr] = Field(default=None, alias="languageId")
    gender: Optional[StrictInt] = None
    city_id: Optional[StrictStr] = Field(default=None, alias="cityId")
    state_id: Optional[StrictStr] = Field(default=None, alias="stateId")
    email: Optional[StrictStr] = None
    about: Optional[StrictStr] = None
    job_title: Optional[StrictStr] = Field(default=None, alias="jobTitle")
    social_feed_id: Optional[StrictStr] = Field(default=None, alias="socialFeedId")
    current_tenant_id: Optional[StrictStr] = Field(default=None, alias="currentTenantId")
    current_enrollment_id: Optional[StrictStr] = Field(default=None, alias="currentEnrollmentId")
    status: Optional[StrictStr] = None
    cart_id: Optional[StrictStr] = Field(default=None, alias="cartId")
    wallet_id: Optional[StrictStr] = Field(default=None, alias="walletId")
    user_name: Optional[StrictStr] = Field(default=None, alias="userName")
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    phone_number: Optional[StrictStr] = Field(default=None, alias="phoneNumber")
    public_identifier: Optional[StrictStr] = Field(default=None, alias="publicIdentifier")
    identity_provider: Optional[StrictStr] = Field(default=None, alias="identityProvider")
    phone_number_confirmed: Optional[StrictBool] = Field(default=None, alias="phoneNumberConfirmed")
    email_confirmed: Optional[StrictBool] = Field(default=None, alias="emailConfirmed")
    availability: Optional[StrictInt] = None
    lockout_enabled: Optional[StrictBool] = Field(default=None, alias="lockoutEnabled")
    lockout_end: Optional[datetime] = Field(default=None, alias="lockoutEnd")
    enrollments_count: Optional[StrictInt] = Field(default=None, alias="enrollmentsCount")
    site_theme: Optional[StrictInt] = Field(default=None, alias="siteTheme")
    cart: Optional[CartDto] = None
    wallet: Optional[WalletDto] = None
    social_profile: Optional[SocialProfileDto] = Field(default=None, alias="socialProfile")
    settings: Optional[UserSettingsDto] = None
    __properties: ClassVar[List[str]] = ["id", "timestamp", "fullName", "qualifiedName", "publicName", "lastName", "firstName", "coverUrl", "avatarUrl", "gitHubUrl", "countryId", "timezoneId", "websiteUrl", "twitterUrl", "youTubeUrl", "linkedInUrl", "facebookUrl", "instagramUrl", "socialProfileId", "birthday", "idProvider", "languageId", "gender", "cityId", "stateId", "email", "about", "jobTitle", "socialFeedId", "currentTenantId", "currentEnrollmentId", "status", "cartId", "walletId", "userName", "currencyId", "phoneNumber", "publicIdentifier", "identityProvider", "phoneNumberConfirmed", "emailConfirmed", "availability", "lockoutEnabled", "lockoutEnd", "enrollmentsCount", "siteTheme", "cart", "wallet", "socialProfile", "settings"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    @field_validator('availability')
    def availability_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3, 4]):
            raise ValueError("must be one of enum values (0, 1, 2, 3, 4)")
        return value

    @field_validator('site_theme')
    def site_theme_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2]):
            raise ValueError("must be one of enum values (0, 1, 2)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedUserDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "full_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cart
        if self.cart:
            _dict['cart'] = self.cart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wallet
        if self.wallet:
            _dict['wallet'] = self.wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of social_profile
        if self.social_profile:
            _dict['socialProfile'] = self.social_profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict['settings'] = self.settings.to_dict()
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if qualified_name (nullable) is None
        # and model_fields_set contains the field
        if self.qualified_name is None and "qualified_name" in self.model_fields_set:
            _dict['qualifiedName'] = None

        # set to None if public_name (nullable) is None
        # and model_fields_set contains the field
        if self.public_name is None and "public_name" in self.model_fields_set:
            _dict['publicName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if cover_url (nullable) is None
        # and model_fields_set contains the field
        if self.cover_url is None and "cover_url" in self.model_fields_set:
            _dict['coverUrl'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatarUrl'] = None

        # set to None if git_hub_url (nullable) is None
        # and model_fields_set contains the field
        if self.git_hub_url is None and "git_hub_url" in self.model_fields_set:
            _dict['gitHubUrl'] = None

        # set to None if country_id (nullable) is None
        # and model_fields_set contains the field
        if self.country_id is None and "country_id" in self.model_fields_set:
            _dict['countryId'] = None

        # set to None if timezone_id (nullable) is None
        # and model_fields_set contains the field
        if self.timezone_id is None and "timezone_id" in self.model_fields_set:
            _dict['timezoneId'] = None

        # set to None if website_url (nullable) is None
        # and model_fields_set contains the field
        if self.website_url is None and "website_url" in self.model_fields_set:
            _dict['websiteUrl'] = None

        # set to None if twitter_url (nullable) is None
        # and model_fields_set contains the field
        if self.twitter_url is None and "twitter_url" in self.model_fields_set:
            _dict['twitterUrl'] = None

        # set to None if you_tube_url (nullable) is None
        # and model_fields_set contains the field
        if self.you_tube_url is None and "you_tube_url" in self.model_fields_set:
            _dict['youTubeUrl'] = None

        # set to None if linked_in_url (nullable) is None
        # and model_fields_set contains the field
        if self.linked_in_url is None and "linked_in_url" in self.model_fields_set:
            _dict['linkedInUrl'] = None

        # set to None if facebook_url (nullable) is None
        # and model_fields_set contains the field
        if self.facebook_url is None and "facebook_url" in self.model_fields_set:
            _dict['facebookUrl'] = None

        # set to None if instagram_url (nullable) is None
        # and model_fields_set contains the field
        if self.instagram_url is None and "instagram_url" in self.model_fields_set:
            _dict['instagramUrl'] = None

        # set to None if social_profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.social_profile_id is None and "social_profile_id" in self.model_fields_set:
            _dict['socialProfileId'] = None

        # set to None if birthday (nullable) is None
        # and model_fields_set contains the field
        if self.birthday is None and "birthday" in self.model_fields_set:
            _dict['birthday'] = None

        # set to None if id_provider (nullable) is None
        # and model_fields_set contains the field
        if self.id_provider is None and "id_provider" in self.model_fields_set:
            _dict['idProvider'] = None

        # set to None if language_id (nullable) is None
        # and model_fields_set contains the field
        if self.language_id is None and "language_id" in self.model_fields_set:
            _dict['languageId'] = None

        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if city_id (nullable) is None
        # and model_fields_set contains the field
        if self.city_id is None and "city_id" in self.model_fields_set:
            _dict['cityId'] = None

        # set to None if state_id (nullable) is None
        # and model_fields_set contains the field
        if self.state_id is None and "state_id" in self.model_fields_set:
            _dict['stateId'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if about (nullable) is None
        # and model_fields_set contains the field
        if self.about is None and "about" in self.model_fields_set:
            _dict['about'] = None

        # set to None if job_title (nullable) is None
        # and model_fields_set contains the field
        if self.job_title is None and "job_title" in self.model_fields_set:
            _dict['jobTitle'] = None

        # set to None if social_feed_id (nullable) is None
        # and model_fields_set contains the field
        if self.social_feed_id is None and "social_feed_id" in self.model_fields_set:
            _dict['socialFeedId'] = None

        # set to None if current_tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.current_tenant_id is None and "current_tenant_id" in self.model_fields_set:
            _dict['currentTenantId'] = None

        # set to None if current_enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.current_enrollment_id is None and "current_enrollment_id" in self.model_fields_set:
            _dict['currentEnrollmentId'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if cart_id (nullable) is None
        # and model_fields_set contains the field
        if self.cart_id is None and "cart_id" in self.model_fields_set:
            _dict['cartId'] = None

        # set to None if wallet_id (nullable) is None
        # and model_fields_set contains the field
        if self.wallet_id is None and "wallet_id" in self.model_fields_set:
            _dict['walletId'] = None

        # set to None if user_name (nullable) is None
        # and model_fields_set contains the field
        if self.user_name is None and "user_name" in self.model_fields_set:
            _dict['userName'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phoneNumber'] = None

        # set to None if public_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.public_identifier is None and "public_identifier" in self.model_fields_set:
            _dict['publicIdentifier'] = None

        # set to None if identity_provider (nullable) is None
        # and model_fields_set contains the field
        if self.identity_provider is None and "identity_provider" in self.model_fields_set:
            _dict['identityProvider'] = None

        # set to None if availability (nullable) is None
        # and model_fields_set contains the field
        if self.availability is None and "availability" in self.model_fields_set:
            _dict['availability'] = None

        # set to None if lockout_end (nullable) is None
        # and model_fields_set contains the field
        if self.lockout_end is None and "lockout_end" in self.model_fields_set:
            _dict['lockoutEnd'] = None

        # set to None if enrollments_count (nullable) is None
        # and model_fields_set contains the field
        if self.enrollments_count is None and "enrollments_count" in self.model_fields_set:
            _dict['enrollmentsCount'] = None

        # set to None if site_theme (nullable) is None
        # and model_fields_set contains the field
        if self.site_theme is None and "site_theme" in self.model_fields_set:
            _dict['siteTheme'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedUserDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "fullName": obj.get("fullName"),
            "qualifiedName": obj.get("qualifiedName"),
            "publicName": obj.get("publicName"),
            "lastName": obj.get("lastName"),
            "firstName": obj.get("firstName"),
            "coverUrl": obj.get("coverUrl"),
            "avatarUrl": obj.get("avatarUrl"),
            "gitHubUrl": obj.get("gitHubUrl"),
            "countryId": obj.get("countryId"),
            "timezoneId": obj.get("timezoneId"),
            "websiteUrl": obj.get("websiteUrl"),
            "twitterUrl": obj.get("twitterUrl"),
            "youTubeUrl": obj.get("youTubeUrl"),
            "linkedInUrl": obj.get("linkedInUrl"),
            "facebookUrl": obj.get("facebookUrl"),
            "instagramUrl": obj.get("instagramUrl"),
            "socialProfileId": obj.get("socialProfileId"),
            "birthday": obj.get("birthday"),
            "idProvider": obj.get("idProvider"),
            "languageId": obj.get("languageId"),
            "gender": obj.get("gender"),
            "cityId": obj.get("cityId"),
            "stateId": obj.get("stateId"),
            "email": obj.get("email"),
            "about": obj.get("about"),
            "jobTitle": obj.get("jobTitle"),
            "socialFeedId": obj.get("socialFeedId"),
            "currentTenantId": obj.get("currentTenantId"),
            "currentEnrollmentId": obj.get("currentEnrollmentId"),
            "status": obj.get("status"),
            "cartId": obj.get("cartId"),
            "walletId": obj.get("walletId"),
            "userName": obj.get("userName"),
            "currencyId": obj.get("currencyId"),
            "phoneNumber": obj.get("phoneNumber"),
            "publicIdentifier": obj.get("publicIdentifier"),
            "identityProvider": obj.get("identityProvider"),
            "phoneNumberConfirmed": obj.get("phoneNumberConfirmed"),
            "emailConfirmed": obj.get("emailConfirmed"),
            "availability": obj.get("availability"),
            "lockoutEnabled": obj.get("lockoutEnabled"),
            "lockoutEnd": obj.get("lockoutEnd"),
            "enrollmentsCount": obj.get("enrollmentsCount"),
            "siteTheme": obj.get("siteTheme"),
            "cart": CartDto.from_dict(obj["cart"]) if obj.get("cart") is not None else None,
            "wallet": WalletDto.from_dict(obj["wallet"]) if obj.get("wallet") is not None else None,
            "socialProfile": SocialProfileDto.from_dict(obj["socialProfile"]) if obj.get("socialProfile") is not None else None,
            "settings": UserSettingsDto.from_dict(obj["settings"]) if obj.get("settings") is not None else None
        })
        return _obj


