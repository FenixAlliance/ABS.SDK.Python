# coding: utf-8

"""
    SystemService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.i_swagger_contact import ISwaggerContact
from openapi_client.models.i_swagger_endpoint import ISwaggerEndpoint
from openapi_client.models.i_swagger_license import ISwaggerLicense
from typing import Optional, Set
from typing_extensions import Self

class ISwaggerSpec(BaseModel):
    """
    ISwaggerSpec
    """ # noqa: E501
    enable: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    terms_of_service: Optional[StrictStr] = Field(default=None, alias="termsOfService")
    swagger_endpoint: Optional[ISwaggerEndpoint] = Field(default=None, alias="swaggerEndpoint")
    open_api_contact: Optional[ISwaggerContact] = Field(default=None, alias="openApiContact")
    license: Optional[ISwaggerLicense] = None
    __properties: ClassVar[List[str]] = ["enable", "name", "title", "version", "description", "termsOfService", "swaggerEndpoint", "openApiContact", "license"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ISwaggerSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of swagger_endpoint
        if self.swagger_endpoint:
            _dict['swaggerEndpoint'] = self.swagger_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_api_contact
        if self.open_api_contact:
            _dict['openApiContact'] = self.open_api_contact.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license:
            _dict['license'] = self.license.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if terms_of_service (nullable) is None
        # and model_fields_set contains the field
        if self.terms_of_service is None and "terms_of_service" in self.model_fields_set:
            _dict['termsOfService'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ISwaggerSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable": obj.get("enable"),
            "name": obj.get("name"),
            "title": obj.get("title"),
            "version": obj.get("version"),
            "description": obj.get("description"),
            "termsOfService": obj.get("termsOfService"),
            "swaggerEndpoint": ISwaggerEndpoint.from_dict(obj["swaggerEndpoint"]) if obj.get("swaggerEndpoint") is not None else None,
            "openApiContact": ISwaggerContact.from_dict(obj["openApiContact"]) if obj.get("openApiContact") is not None else None,
            "license": ISwaggerLicense.from_dict(obj["license"]) if obj.get("license") is not None else None
        })
        return _obj


