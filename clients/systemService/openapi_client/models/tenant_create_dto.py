# coding: utf-8

"""
    SystemService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TenantCreateDto(BaseModel):
    """
    TenantCreateDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    duns: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    legal_name: Optional[StrictStr] = Field(default=None, alias="legalName")
    email: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    web_url: Optional[StrictStr] = Field(default=None, alias="webUrl")
    about: Optional[StrictStr] = None
    handler: Optional[StrictStr] = None
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    language_id: Optional[StrictStr] = Field(default=None, alias="languageId")
    timezone_id: Optional[StrictStr] = Field(default=None, alias="timezoneId")
    city_id: Optional[StrictStr] = Field(default=None, alias="cityId")
    state_id: Optional[StrictStr] = Field(default=None, alias="stateId")
    country_id: Optional[StrictStr] = Field(default=None, alias="countryId")
    tax_id: Optional[StrictStr] = Field(default=None, alias="taxId")
    avatar_url: Optional[StrictStr] = Field(default=None, alias="avatarUrl")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "duns", "name", "legalName", "email", "phone", "webUrl", "about", "handler", "currencyId", "languageId", "timezoneId", "cityId", "stateId", "countryId", "taxId", "avatarUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantCreateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if duns (nullable) is None
        # and model_fields_set contains the field
        if self.duns is None and "duns" in self.model_fields_set:
            _dict['duns'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if legal_name (nullable) is None
        # and model_fields_set contains the field
        if self.legal_name is None and "legal_name" in self.model_fields_set:
            _dict['legalName'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if web_url (nullable) is None
        # and model_fields_set contains the field
        if self.web_url is None and "web_url" in self.model_fields_set:
            _dict['webUrl'] = None

        # set to None if about (nullable) is None
        # and model_fields_set contains the field
        if self.about is None and "about" in self.model_fields_set:
            _dict['about'] = None

        # set to None if handler (nullable) is None
        # and model_fields_set contains the field
        if self.handler is None and "handler" in self.model_fields_set:
            _dict['handler'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if language_id (nullable) is None
        # and model_fields_set contains the field
        if self.language_id is None and "language_id" in self.model_fields_set:
            _dict['languageId'] = None

        # set to None if timezone_id (nullable) is None
        # and model_fields_set contains the field
        if self.timezone_id is None and "timezone_id" in self.model_fields_set:
            _dict['timezoneId'] = None

        # set to None if city_id (nullable) is None
        # and model_fields_set contains the field
        if self.city_id is None and "city_id" in self.model_fields_set:
            _dict['cityId'] = None

        # set to None if state_id (nullable) is None
        # and model_fields_set contains the field
        if self.state_id is None and "state_id" in self.model_fields_set:
            _dict['stateId'] = None

        # set to None if country_id (nullable) is None
        # and model_fields_set contains the field
        if self.country_id is None and "country_id" in self.model_fields_set:
            _dict['countryId'] = None

        # set to None if tax_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_id is None and "tax_id" in self.model_fields_set:
            _dict['taxId'] = None

        # set to None if avatar_url (nullable) is None
        # and model_fields_set contains the field
        if self.avatar_url is None and "avatar_url" in self.model_fields_set:
            _dict['avatarUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantCreateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "duns": obj.get("duns"),
            "name": obj.get("name"),
            "legalName": obj.get("legalName"),
            "email": obj.get("email"),
            "phone": obj.get("phone"),
            "webUrl": obj.get("webUrl"),
            "about": obj.get("about"),
            "handler": obj.get("handler"),
            "currencyId": obj.get("currencyId"),
            "languageId": obj.get("languageId"),
            "timezoneId": obj.get("timezoneId"),
            "cityId": obj.get("cityId"),
            "stateId": obj.get("stateId"),
            "countryId": obj.get("countryId"),
            "taxId": obj.get("taxId"),
            "avatarUrl": obj.get("avatarUrl")
        })
        return _obj


