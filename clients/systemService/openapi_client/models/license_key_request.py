# coding: utf-8

"""
    SystemService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.additional_attribute import AdditionalAttribute
from openapi_client.models.license_feature import LicenseFeature
from typing import Optional, Set
from typing_extensions import Self

class LicenseKeyRequest(BaseModel):
    """
    LicenseKeyRequest
    """ # noqa: E501
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    order_id: Optional[StrictStr] = Field(default=None, alias="orderId")
    payment_id: Optional[StrictStr] = Field(default=None, alias="paymentId")
    invoice_id: Optional[StrictStr] = Field(default=None, alias="invoiceId")
    enrollment_id: Optional[StrictStr] = Field(default=None, alias="enrollmentId")
    entitlement_id: Optional[StrictStr] = Field(default=None, alias="entitlementId")
    seats: Optional[StrictInt] = None
    license_type: Optional[StrictInt] = Field(default=None, alias="licenseType")
    expiration_date: Optional[datetime] = Field(default=None, alias="expirationDate")
    features: Optional[List[LicenseFeature]] = None
    additional_attributes: Optional[List[AdditionalAttribute]] = Field(default=None, alias="additionalAttributes")
    __properties: ClassVar[List[str]] = ["userId", "tenantId", "orderId", "paymentId", "invoiceId", "enrollmentId", "entitlementId", "seats", "licenseType", "expirationDate", "features", "additionalAttributes"]

    @field_validator('license_type')
    def license_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 2, 3]):
            raise ValueError("must be one of enum values (1, 2, 3)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LicenseKeyRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item_features in self.features:
                if _item_features:
                    _items.append(_item_features.to_dict())
            _dict['features'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in additional_attributes (list)
        _items = []
        if self.additional_attributes:
            for _item_additional_attributes in self.additional_attributes:
                if _item_additional_attributes:
                    _items.append(_item_additional_attributes.to_dict())
            _dict['additionalAttributes'] = _items
        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if order_id (nullable) is None
        # and model_fields_set contains the field
        if self.order_id is None and "order_id" in self.model_fields_set:
            _dict['orderId'] = None

        # set to None if payment_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_id is None and "payment_id" in self.model_fields_set:
            _dict['paymentId'] = None

        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoiceId'] = None

        # set to None if enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrollment_id is None and "enrollment_id" in self.model_fields_set:
            _dict['enrollmentId'] = None

        # set to None if entitlement_id (nullable) is None
        # and model_fields_set contains the field
        if self.entitlement_id is None and "entitlement_id" in self.model_fields_set:
            _dict['entitlementId'] = None

        # set to None if features (nullable) is None
        # and model_fields_set contains the field
        if self.features is None and "features" in self.model_fields_set:
            _dict['features'] = None

        # set to None if additional_attributes (nullable) is None
        # and model_fields_set contains the field
        if self.additional_attributes is None and "additional_attributes" in self.model_fields_set:
            _dict['additionalAttributes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LicenseKeyRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "tenantId": obj.get("tenantId"),
            "orderId": obj.get("orderId"),
            "paymentId": obj.get("paymentId"),
            "invoiceId": obj.get("invoiceId"),
            "enrollmentId": obj.get("enrollmentId"),
            "entitlementId": obj.get("entitlementId"),
            "seats": obj.get("seats"),
            "licenseType": obj.get("licenseType"),
            "expirationDate": obj.get("expirationDate"),
            "features": [LicenseFeature.from_dict(_item) for _item in obj["features"]] if obj.get("features") is not None else None,
            "additionalAttributes": [AdditionalAttribute.from_dict(_item) for _item in obj["additionalAttributes"]] if obj.get("additionalAttributes") is not None else None
        })
        return _obj


