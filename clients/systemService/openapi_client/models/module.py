# coding: utf-8

"""
    SystemService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.i_swagger_spec import ISwaggerSpec
from typing import Optional, Set
from typing_extensions import Self

class Module(BaseModel):
    """
    Module
    """ # noqa: E501
    enable: Optional[StrictBool] = None
    active: Optional[StrictBool] = None
    order: Optional[StrictInt] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    description: Optional[StrictStr] = None
    type: Optional[StrictInt] = None
    configuration: Optional[StrictStr] = None
    author: Optional[StrictStr] = None
    author_url: Optional[StrictStr] = Field(default=None, alias="authorUrl")
    license: Optional[StrictStr] = None
    require_license_acceptance: Optional[StrictBool] = Field(default=None, alias="requireLicenseAcceptance")
    repository: Optional[StrictStr] = None
    path: Optional[StrictStr] = None
    icon: Optional[StrictStr] = None
    image: Optional[StrictStr] = None
    nu_spec_path: Optional[StrictStr] = Field(default=None, alias="nuSpecPath")
    manifest: Optional[StrictStr] = None
    documentation: Optional[StrictStr] = None
    website: Optional[StrictStr] = None
    logo: Optional[StrictStr] = None
    swagger_spec: Optional[ISwaggerSpec] = Field(default=None, alias="swaggerSpec")
    swagger_specs: Optional[List[ISwaggerSpec]] = Field(default=None, alias="swaggerSpecs")
    url: Optional[StrictStr] = None
    assembly_paths: Optional[List[StrictStr]] = Field(default=None, alias="assemblyPaths")
    marked_for_deletion: Optional[StrictBool] = Field(default=None, alias="markedForDeletion")
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["enable", "active", "order", "id", "name", "fullName", "description", "type", "configuration", "author", "authorUrl", "license", "requireLicenseAcceptance", "repository", "path", "icon", "image", "nuSpecPath", "manifest", "documentation", "website", "logo", "swaggerSpec", "swaggerSpecs", "url", "assemblyPaths", "markedForDeletion", "version"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1, 2, 3]):
            raise ValueError("must be one of enum values (0, 1, 2, 3)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Module from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "active",
            "full_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of swagger_spec
        if self.swagger_spec:
            _dict['swaggerSpec'] = self.swagger_spec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in swagger_specs (list)
        _items = []
        if self.swagger_specs:
            for _item_swagger_specs in self.swagger_specs:
                if _item_swagger_specs:
                    _items.append(_item_swagger_specs.to_dict())
            _dict['swaggerSpecs'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if full_name (nullable) is None
        # and model_fields_set contains the field
        if self.full_name is None and "full_name" in self.model_fields_set:
            _dict['fullName'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if configuration (nullable) is None
        # and model_fields_set contains the field
        if self.configuration is None and "configuration" in self.model_fields_set:
            _dict['configuration'] = None

        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if author_url (nullable) is None
        # and model_fields_set contains the field
        if self.author_url is None and "author_url" in self.model_fields_set:
            _dict['authorUrl'] = None

        # set to None if license (nullable) is None
        # and model_fields_set contains the field
        if self.license is None and "license" in self.model_fields_set:
            _dict['license'] = None

        # set to None if require_license_acceptance (nullable) is None
        # and model_fields_set contains the field
        if self.require_license_acceptance is None and "require_license_acceptance" in self.model_fields_set:
            _dict['requireLicenseAcceptance'] = None

        # set to None if repository (nullable) is None
        # and model_fields_set contains the field
        if self.repository is None and "repository" in self.model_fields_set:
            _dict['repository'] = None

        # set to None if path (nullable) is None
        # and model_fields_set contains the field
        if self.path is None and "path" in self.model_fields_set:
            _dict['path'] = None

        # set to None if icon (nullable) is None
        # and model_fields_set contains the field
        if self.icon is None and "icon" in self.model_fields_set:
            _dict['icon'] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict['image'] = None

        # set to None if nu_spec_path (nullable) is None
        # and model_fields_set contains the field
        if self.nu_spec_path is None and "nu_spec_path" in self.model_fields_set:
            _dict['nuSpecPath'] = None

        # set to None if manifest (nullable) is None
        # and model_fields_set contains the field
        if self.manifest is None and "manifest" in self.model_fields_set:
            _dict['manifest'] = None

        # set to None if documentation (nullable) is None
        # and model_fields_set contains the field
        if self.documentation is None and "documentation" in self.model_fields_set:
            _dict['documentation'] = None

        # set to None if website (nullable) is None
        # and model_fields_set contains the field
        if self.website is None and "website" in self.model_fields_set:
            _dict['website'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if swagger_specs (nullable) is None
        # and model_fields_set contains the field
        if self.swagger_specs is None and "swagger_specs" in self.model_fields_set:
            _dict['swaggerSpecs'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if assembly_paths (nullable) is None
        # and model_fields_set contains the field
        if self.assembly_paths is None and "assembly_paths" in self.model_fields_set:
            _dict['assemblyPaths'] = None

        # set to None if version (nullable) is None
        # and model_fields_set contains the field
        if self.version is None and "version" in self.model_fields_set:
            _dict['version'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Module from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable": obj.get("enable"),
            "active": obj.get("active"),
            "order": obj.get("order"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "fullName": obj.get("fullName"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "configuration": obj.get("configuration"),
            "author": obj.get("author"),
            "authorUrl": obj.get("authorUrl"),
            "license": obj.get("license"),
            "requireLicenseAcceptance": obj.get("requireLicenseAcceptance"),
            "repository": obj.get("repository"),
            "path": obj.get("path"),
            "icon": obj.get("icon"),
            "image": obj.get("image"),
            "nuSpecPath": obj.get("nuSpecPath"),
            "manifest": obj.get("manifest"),
            "documentation": obj.get("documentation"),
            "website": obj.get("website"),
            "logo": obj.get("logo"),
            "swaggerSpec": ISwaggerSpec.from_dict(obj["swaggerSpec"]) if obj.get("swaggerSpec") is not None else None,
            "swaggerSpecs": [ISwaggerSpec.from_dict(_item) for _item in obj["swaggerSpecs"]] if obj.get("swaggerSpecs") is not None else None,
            "url": obj.get("url"),
            "assemblyPaths": obj.get("assemblyPaths"),
            "markedForDeletion": obj.get("markedForDeletion"),
            "version": obj.get("version")
        })
        return _obj


