# coding: utf-8

"""
    InvoicingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InvoiceLineAppliedTaxDto(BaseModel):
    """
    InvoiceLineAppliedTaxDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    invoice_id: Optional[StrictStr] = Field(default=None, alias="invoiceId")
    enrollment_id: Optional[StrictStr] = Field(default=None, alias="enrollmentId")
    invoice_line_id: Optional[StrictStr] = Field(default=None, alias="invoiceLineId")
    tax_policy_id: Optional[StrictStr] = Field(default=None, alias="taxPolicyId")
    item_price_id: Optional[StrictStr] = Field(default=None, alias="itemPriceId")
    item_id: Optional[StrictStr] = Field(default=None, alias="itemId")
    tax_amount_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxAmountInUsd")
    tax_base_amount_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="taxBaseAmountInUsd")
    tax_policy_name: Optional[StrictStr] = Field(default=None, alias="taxPolicyName")
    tax_policy_description: Optional[StrictStr] = Field(default=None, alias="taxPolicyDescription")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "tenantId", "invoiceId", "enrollmentId", "invoiceLineId", "taxPolicyId", "itemPriceId", "itemId", "taxAmountInUsd", "taxBaseAmountInUsd", "taxPolicyName", "taxPolicyDescription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceLineAppliedTaxDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if invoice_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_id is None and "invoice_id" in self.model_fields_set:
            _dict['invoiceId'] = None

        # set to None if enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrollment_id is None and "enrollment_id" in self.model_fields_set:
            _dict['enrollmentId'] = None

        # set to None if invoice_line_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoice_line_id is None and "invoice_line_id" in self.model_fields_set:
            _dict['invoiceLineId'] = None

        # set to None if tax_policy_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_policy_id is None and "tax_policy_id" in self.model_fields_set:
            _dict['taxPolicyId'] = None

        # set to None if item_price_id (nullable) is None
        # and model_fields_set contains the field
        if self.item_price_id is None and "item_price_id" in self.model_fields_set:
            _dict['itemPriceId'] = None

        # set to None if item_id (nullable) is None
        # and model_fields_set contains the field
        if self.item_id is None and "item_id" in self.model_fields_set:
            _dict['itemId'] = None

        # set to None if tax_policy_name (nullable) is None
        # and model_fields_set contains the field
        if self.tax_policy_name is None and "tax_policy_name" in self.model_fields_set:
            _dict['taxPolicyName'] = None

        # set to None if tax_policy_description (nullable) is None
        # and model_fields_set contains the field
        if self.tax_policy_description is None and "tax_policy_description" in self.model_fields_set:
            _dict['taxPolicyDescription'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceLineAppliedTaxDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "tenantId": obj.get("tenantId"),
            "invoiceId": obj.get("invoiceId"),
            "enrollmentId": obj.get("enrollmentId"),
            "invoiceLineId": obj.get("invoiceLineId"),
            "taxPolicyId": obj.get("taxPolicyId"),
            "itemPriceId": obj.get("itemPriceId"),
            "itemId": obj.get("itemId"),
            "taxAmountInUsd": obj.get("taxAmountInUsd"),
            "taxBaseAmountInUsd": obj.get("taxBaseAmountInUsd"),
            "taxPolicyName": obj.get("taxPolicyName"),
            "taxPolicyDescription": obj.get("taxPolicyDescription")
        })
        return _obj


