# coding: utf-8

"""
    StorageService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import StrictBool, StrictBytes, StrictStr
from typing import Optional, Tuple, Union
from openapi_client.models.empty_envelope import EmptyEnvelope
from openapi_client.models.file_upload_dto_envelope import FileUploadDtoEnvelope

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class FilesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_file_async(
        self,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        timestamp: Optional[datetime] = None,
        notes: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        author: Optional[StrictStr] = None,
        is_folder: Optional[StrictBool] = None,
        file_name: Optional[StrictStr] = None,
        abstract: Optional[StrictStr] = None,
        key_words: Optional[StrictStr] = None,
        valid_response: Optional[StrictBool] = None,
        parent_file_upload_id: Optional[StrictStr] = None,
        file_path: Optional[StrictStr] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> EmptyEnvelope:
        """create_file_async


        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param id:
        :type id: str
        :param timestamp:
        :type timestamp: datetime
        :param notes:
        :type notes: str
        :param title:
        :type title: str
        :param author:
        :type author: str
        :param is_folder:
        :type is_folder: bool
        :param file_name:
        :type file_name: str
        :param abstract:
        :type abstract: str
        :param key_words:
        :type key_words: str
        :param valid_response:
        :type valid_response: bool
        :param parent_file_upload_id:
        :type parent_file_upload_id: str
        :param file_path:
        :type file_path: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_file_async_serialize(
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            id=id,
            timestamp=timestamp,
            notes=notes,
            title=title,
            author=author,
            is_folder=is_folder,
            file_name=file_name,
            abstract=abstract,
            key_words=key_words,
            valid_response=valid_response,
            parent_file_upload_id=parent_file_upload_id,
            file_path=file_path,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "EmptyEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_file_async_with_http_info(
        self,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        timestamp: Optional[datetime] = None,
        notes: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        author: Optional[StrictStr] = None,
        is_folder: Optional[StrictBool] = None,
        file_name: Optional[StrictStr] = None,
        abstract: Optional[StrictStr] = None,
        key_words: Optional[StrictStr] = None,
        valid_response: Optional[StrictBool] = None,
        parent_file_upload_id: Optional[StrictStr] = None,
        file_path: Optional[StrictStr] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[EmptyEnvelope]:
        """create_file_async


        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param id:
        :type id: str
        :param timestamp:
        :type timestamp: datetime
        :param notes:
        :type notes: str
        :param title:
        :type title: str
        :param author:
        :type author: str
        :param is_folder:
        :type is_folder: bool
        :param file_name:
        :type file_name: str
        :param abstract:
        :type abstract: str
        :param key_words:
        :type key_words: str
        :param valid_response:
        :type valid_response: bool
        :param parent_file_upload_id:
        :type parent_file_upload_id: str
        :param file_path:
        :type file_path: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_file_async_serialize(
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            id=id,
            timestamp=timestamp,
            notes=notes,
            title=title,
            author=author,
            is_folder=is_folder,
            file_name=file_name,
            abstract=abstract,
            key_words=key_words,
            valid_response=valid_response,
            parent_file_upload_id=parent_file_upload_id,
            file_path=file_path,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "EmptyEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_file_async_without_preload_content(
        self,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        id: Optional[StrictStr] = None,
        timestamp: Optional[datetime] = None,
        notes: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        author: Optional[StrictStr] = None,
        is_folder: Optional[StrictBool] = None,
        file_name: Optional[StrictStr] = None,
        abstract: Optional[StrictStr] = None,
        key_words: Optional[StrictStr] = None,
        valid_response: Optional[StrictBool] = None,
        parent_file_upload_id: Optional[StrictStr] = None,
        file_path: Optional[StrictStr] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """create_file_async


        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param id:
        :type id: str
        :param timestamp:
        :type timestamp: datetime
        :param notes:
        :type notes: str
        :param title:
        :type title: str
        :param author:
        :type author: str
        :param is_folder:
        :type is_folder: bool
        :param file_name:
        :type file_name: str
        :param abstract:
        :type abstract: str
        :param key_words:
        :type key_words: str
        :param valid_response:
        :type valid_response: bool
        :param parent_file_upload_id:
        :type parent_file_upload_id: str
        :param file_path:
        :type file_path: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_file_async_serialize(
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            id=id,
            timestamp=timestamp,
            notes=notes,
            title=title,
            author=author,
            is_folder=is_folder,
            file_name=file_name,
            abstract=abstract,
            key_words=key_words,
            valid_response=valid_response,
            parent_file_upload_id=parent_file_upload_id,
            file_path=file_path,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "EmptyEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_file_async_serialize(
        self,
        tenant_id,
        api_version,
        x_api_version,
        id,
        timestamp,
        notes,
        title,
        author,
        is_folder,
        file_name,
        abstract,
        key_words,
        valid_response,
        parent_file_upload_id,
        file_path,
        file,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['x-api-version'] = x_api_version
        # process the form parameters
        if id is not None:
            _form_params.append(('id', id))
        if timestamp is not None:
            _form_params.append(('timestamp', timestamp))
        if notes is not None:
            _form_params.append(('notes', notes))
        if title is not None:
            _form_params.append(('title', title))
        if author is not None:
            _form_params.append(('author', author))
        if is_folder is not None:
            _form_params.append(('isFolder', is_folder))
        if file_name is not None:
            _form_params.append(('fileName', file_name))
        if abstract is not None:
            _form_params.append(('abstract', abstract))
        if key_words is not None:
            _form_params.append(('keyWords', key_words))
        if valid_response is not None:
            _form_params.append(('validResponse', valid_response))
        if parent_file_upload_id is not None:
            _form_params.append(('parentFileUploadId', parent_file_upload_id))
        if file_path is not None:
            _form_params.append(('filePath', file_path))
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'image/png'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v2/StorageService/Files',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_file_async(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FileUploadDtoEnvelope:
        """delete_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_file_async_with_http_info(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FileUploadDtoEnvelope]:
        """delete_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_file_async_without_preload_content(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """delete_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_file_async_serialize(
        self,
        file_id,
        tenant_id,
        api_version,
        x_api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if file_id is not None:
            _path_params['fileId'] = file_id
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['x-api-version'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/v2/StorageService/Files/{fileId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def download_file_async(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> bytearray:
        """download_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def download_file_async_with_http_info(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[bytearray]:
        """download_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def download_file_async_without_preload_content(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """download_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._download_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "bytearray",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _download_file_async_serialize(
        self,
        file_id,
        tenant_id,
        api_version,
        x_api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if file_id is not None:
            _path_params['fileId'] = file_id
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['x-api-version'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/StorageService/Files/{fileId}/Raw',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_file_async(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FileUploadDtoEnvelope:
        """get_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_file_async_with_http_info(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FileUploadDtoEnvelope]:
        """get_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_file_async_without_preload_content(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_file_async_serialize(
        self,
        file_id,
        tenant_id,
        api_version,
        x_api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if file_id is not None:
            _path_params['fileId'] = file_id
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['x-api-version'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/StorageService/Files/{fileId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_files_async(
        self,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FileUploadDtoEnvelope:
        """get_files_async


        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_files_async_serialize(
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_files_async_with_http_info(
        self,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FileUploadDtoEnvelope]:
        """get_files_async


        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_files_async_serialize(
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_files_async_without_preload_content(
        self,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_files_async


        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_files_async_serialize(
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_files_async_serialize(
        self,
        tenant_id,
        api_version,
        x_api_version,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['x-api-version'] = x_api_version
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'image/png'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v2/StorageService/Files',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_file_async(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        notes: Optional[StrictStr] = None,
        metadata: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        author: Optional[StrictStr] = None,
        is_folder: Optional[StrictBool] = None,
        file_name: Optional[StrictStr] = None,
        abstract: Optional[StrictStr] = None,
        key_words: Optional[StrictStr] = None,
        valid_response: Optional[StrictBool] = None,
        parent_file_upload_id: Optional[StrictStr] = None,
        file_path: Optional[StrictStr] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FileUploadDtoEnvelope:
        """update_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param notes:
        :type notes: str
        :param metadata:
        :type metadata: str
        :param title:
        :type title: str
        :param author:
        :type author: str
        :param is_folder:
        :type is_folder: bool
        :param file_name:
        :type file_name: str
        :param abstract:
        :type abstract: str
        :param key_words:
        :type key_words: str
        :param valid_response:
        :type valid_response: bool
        :param parent_file_upload_id:
        :type parent_file_upload_id: str
        :param file_path:
        :type file_path: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            notes=notes,
            metadata=metadata,
            title=title,
            author=author,
            is_folder=is_folder,
            file_name=file_name,
            abstract=abstract,
            key_words=key_words,
            valid_response=valid_response,
            parent_file_upload_id=parent_file_upload_id,
            file_path=file_path,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_file_async_with_http_info(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        notes: Optional[StrictStr] = None,
        metadata: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        author: Optional[StrictStr] = None,
        is_folder: Optional[StrictBool] = None,
        file_name: Optional[StrictStr] = None,
        abstract: Optional[StrictStr] = None,
        key_words: Optional[StrictStr] = None,
        valid_response: Optional[StrictBool] = None,
        parent_file_upload_id: Optional[StrictStr] = None,
        file_path: Optional[StrictStr] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FileUploadDtoEnvelope]:
        """update_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param notes:
        :type notes: str
        :param metadata:
        :type metadata: str
        :param title:
        :type title: str
        :param author:
        :type author: str
        :param is_folder:
        :type is_folder: bool
        :param file_name:
        :type file_name: str
        :param abstract:
        :type abstract: str
        :param key_words:
        :type key_words: str
        :param valid_response:
        :type valid_response: bool
        :param parent_file_upload_id:
        :type parent_file_upload_id: str
        :param file_path:
        :type file_path: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            notes=notes,
            metadata=metadata,
            title=title,
            author=author,
            is_folder=is_folder,
            file_name=file_name,
            abstract=abstract,
            key_words=key_words,
            valid_response=valid_response,
            parent_file_upload_id=parent_file_upload_id,
            file_path=file_path,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_file_async_without_preload_content(
        self,
        file_id: StrictStr,
        tenant_id: Optional[StrictStr] = None,
        api_version: Optional[StrictStr] = None,
        x_api_version: Optional[StrictStr] = None,
        notes: Optional[StrictStr] = None,
        metadata: Optional[StrictStr] = None,
        title: Optional[StrictStr] = None,
        author: Optional[StrictStr] = None,
        is_folder: Optional[StrictBool] = None,
        file_name: Optional[StrictStr] = None,
        abstract: Optional[StrictStr] = None,
        key_words: Optional[StrictStr] = None,
        valid_response: Optional[StrictBool] = None,
        parent_file_upload_id: Optional[StrictStr] = None,
        file_path: Optional[StrictStr] = None,
        file: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """update_file_async


        :param file_id: (required)
        :type file_id: str
        :param tenant_id:
        :type tenant_id: str
        :param api_version:
        :type api_version: str
        :param x_api_version:
        :type x_api_version: str
        :param notes:
        :type notes: str
        :param metadata:
        :type metadata: str
        :param title:
        :type title: str
        :param author:
        :type author: str
        :param is_folder:
        :type is_folder: bool
        :param file_name:
        :type file_name: str
        :param abstract:
        :type abstract: str
        :param key_words:
        :type key_words: str
        :param valid_response:
        :type valid_response: bool
        :param parent_file_upload_id:
        :type parent_file_upload_id: str
        :param file_path:
        :type file_path: str
        :param file:
        :type file: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_file_async_serialize(
            file_id=file_id,
            tenant_id=tenant_id,
            api_version=api_version,
            x_api_version=x_api_version,
            notes=notes,
            metadata=metadata,
            title=title,
            author=author,
            is_folder=is_folder,
            file_name=file_name,
            abstract=abstract,
            key_words=key_words,
            valid_response=valid_response,
            parent_file_upload_id=parent_file_upload_id,
            file_path=file_path,
            file=file,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FileUploadDtoEnvelope",
            '403': "ErrorEnvelope",
            '401': "ErrorEnvelope",
            '400': "ErrorEnvelope",
            '409': "ErrorEnvelope",
            '422': "ErrorEnvelope",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_file_async_serialize(
        self,
        file_id,
        tenant_id,
        api_version,
        x_api_version,
        notes,
        metadata,
        title,
        author,
        is_folder,
        file_name,
        abstract,
        key_words,
        valid_response,
        parent_file_upload_id,
        file_path,
        file,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if file_id is not None:
            _path_params['fileId'] = file_id
        # process the query parameters
        if tenant_id is not None:
            
            _query_params.append(('tenantId', tenant_id))
            
        if api_version is not None:
            
            _query_params.append(('api-version', api_version))
            
        # process the header parameters
        if x_api_version is not None:
            _header_params['x-api-version'] = x_api_version
        # process the form parameters
        if notes is not None:
            _form_params.append(('notes', notes))
        if metadata is not None:
            _form_params.append(('metadata', metadata))
        if title is not None:
            _form_params.append(('title', title))
        if author is not None:
            _form_params.append(('author', author))
        if is_folder is not None:
            _form_params.append(('isFolder', is_folder))
        if file_name is not None:
            _form_params.append(('fileName', file_name))
        if abstract is not None:
            _form_params.append(('abstract', abstract))
        if key_words is not None:
            _form_params.append(('keyWords', key_words))
        if valid_response is not None:
            _form_params.append(('validResponse', valid_response))
        if parent_file_upload_id is not None:
            _form_params.append(('parentFileUploadID', parent_file_upload_id))
        if file_path is not None:
            _form_params.append(('filePath', file_path))
        if file is not None:
            _files['file'] = file
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'image/png'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'Bearer'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/api/v2/StorageService/Files/{fileId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


