# coding: utf-8

"""
    StorageService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Blob(BaseModel):
    """
    Blob
    """ # noqa: E501
    kind: Optional[StrictInt] = None
    is_folder: Optional[StrictBool] = Field(default=None, alias="isFolder")
    is_file: Optional[StrictBool] = Field(default=None, alias="isFile")
    folder_path: Optional[StrictStr] = Field(default=None, alias="folderPath")
    name: Optional[StrictStr] = None
    size: Optional[StrictInt] = None
    md5: Optional[StrictStr] = None
    created_time: Optional[datetime] = Field(default=None, alias="createdTime")
    last_modification_time: Optional[datetime] = Field(default=None, alias="lastModificationTime")
    full_path: Optional[StrictStr] = Field(default=None, alias="fullPath")
    properties: Optional[Dict[str, Any]] = None
    metadata: Optional[Dict[str, Optional[StrictStr]]] = None
    is_root_folder: Optional[StrictBool] = Field(default=None, alias="isRootFolder")
    __properties: ClassVar[List[str]] = ["kind", "isFolder", "isFile", "folderPath", "name", "size", "md5", "createdTime", "lastModificationTime", "fullPath", "properties", "metadata", "isRootFolder"]

    @field_validator('kind')
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([0, 1]):
            raise ValueError("must be one of enum values (0, 1)")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Blob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "is_folder",
            "is_file",
            "folder_path",
            "name",
            "properties",
            "metadata",
            "is_root_folder",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if folder_path (nullable) is None
        # and model_fields_set contains the field
        if self.folder_path is None and "folder_path" in self.model_fields_set:
            _dict['folderPath'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict['size'] = None

        # set to None if md5 (nullable) is None
        # and model_fields_set contains the field
        if self.md5 is None and "md5" in self.model_fields_set:
            _dict['md5'] = None

        # set to None if created_time (nullable) is None
        # and model_fields_set contains the field
        if self.created_time is None and "created_time" in self.model_fields_set:
            _dict['createdTime'] = None

        # set to None if last_modification_time (nullable) is None
        # and model_fields_set contains the field
        if self.last_modification_time is None and "last_modification_time" in self.model_fields_set:
            _dict['lastModificationTime'] = None

        # set to None if full_path (nullable) is None
        # and model_fields_set contains the field
        if self.full_path is None and "full_path" in self.model_fields_set:
            _dict['fullPath'] = None

        # set to None if properties (nullable) is None
        # and model_fields_set contains the field
        if self.properties is None and "properties" in self.model_fields_set:
            _dict['properties'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Blob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "kind": obj.get("kind"),
            "isFolder": obj.get("isFolder"),
            "isFile": obj.get("isFile"),
            "folderPath": obj.get("folderPath"),
            "name": obj.get("name"),
            "size": obj.get("size"),
            "md5": obj.get("md5"),
            "createdTime": obj.get("createdTime"),
            "lastModificationTime": obj.get("lastModificationTime"),
            "fullPath": obj.get("fullPath"),
            "properties": obj.get("properties"),
            "metadata": obj.get("metadata"),
            "isRootFolder": obj.get("isRootFolder")
        })
        return _obj


