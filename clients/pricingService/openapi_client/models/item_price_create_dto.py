# coding: utf-8

"""
    PricingService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ItemPriceCreateDto(BaseModel):
    """
    ItemPriceCreateDto
    """ # noqa: E501
    id: Optional[StrictStr] = None
    timestamp: Optional[datetime] = None
    item_id: Annotated[str, Field(min_length=1, strict=True)] = Field(alias="itemId")
    unit_id: Optional[StrictStr] = Field(default=None, alias="unitId")
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    price_list_id: Optional[StrictStr] = Field(default=None, alias="priceListId")
    unit_group_id: Optional[StrictStr] = Field(default=None, alias="unitGroupId")
    enrollment_id: Optional[StrictStr] = Field(default=None, alias="enrollmentId")
    discount_list_id: Optional[StrictStr] = Field(default=None, alias="discountListId")
    rounding_policy_id: Optional[StrictStr] = Field(default=None, alias="roundingPolicyId")
    price: Optional[Union[StrictFloat, StrictInt]] = None
    percent: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["id", "timestamp", "itemId", "unitId", "tenantId", "currencyId", "priceListId", "unitGroupId", "enrollmentId", "discountListId", "roundingPolicyId", "price", "percent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemPriceCreateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "timestamp",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if unit_id (nullable) is None
        # and model_fields_set contains the field
        if self.unit_id is None and "unit_id" in self.model_fields_set:
            _dict['unitId'] = None

        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if price_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.price_list_id is None and "price_list_id" in self.model_fields_set:
            _dict['priceListId'] = None

        # set to None if unit_group_id (nullable) is None
        # and model_fields_set contains the field
        if self.unit_group_id is None and "unit_group_id" in self.model_fields_set:
            _dict['unitGroupId'] = None

        # set to None if enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrollment_id is None and "enrollment_id" in self.model_fields_set:
            _dict['enrollmentId'] = None

        # set to None if discount_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.discount_list_id is None and "discount_list_id" in self.model_fields_set:
            _dict['discountListId'] = None

        # set to None if rounding_policy_id (nullable) is None
        # and model_fields_set contains the field
        if self.rounding_policy_id is None and "rounding_policy_id" in self.model_fields_set:
            _dict['roundingPolicyId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemPriceCreateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "itemId": obj.get("itemId"),
            "unitId": obj.get("unitId"),
            "tenantId": obj.get("tenantId"),
            "currencyId": obj.get("currencyId"),
            "priceListId": obj.get("priceListId"),
            "unitGroupId": obj.get("unitGroupId"),
            "enrollmentId": obj.get("enrollmentId"),
            "discountListId": obj.get("discountListId"),
            "roundingPolicyId": obj.get("roundingPolicyId"),
            "price": obj.get("price"),
            "percent": obj.get("percent")
        })
        return _obj


