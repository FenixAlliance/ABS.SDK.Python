# coding: utf-8

"""
    OrdersService

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.1.4089
    Contact: support@fenix-alliance.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrderUpdateDto(BaseModel):
    """
    OrderUpdateDto
    """ # noqa: E501
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    company_name: Optional[StrictStr] = Field(default=None, alias="companyName")
    billing_email: Optional[StrictStr] = Field(default=None, alias="billingEmail")
    address_line1: Optional[StrictStr] = Field(default=None, alias="addressLine1")
    address_line2: Optional[StrictStr] = Field(default=None, alias="addressLine2")
    postal_code: Optional[StrictStr] = Field(default=None, alias="postalCode")
    country_id: Optional[StrictStr] = Field(default=None, alias="countryId")
    state_id: Optional[StrictStr] = Field(default=None, alias="stateId")
    city_id: Optional[StrictStr] = Field(default=None, alias="cityId")
    billing_location_id: Optional[StrictStr] = Field(default=None, alias="billingLocationId")
    shipping_location_id: Optional[StrictStr] = Field(default=None, alias="shippingLocationId")
    shipping_method_id: Optional[StrictStr] = Field(default=None, alias="shippingMethodId")
    cart_id: Optional[StrictStr] = Field(default=None, alias="cartId")
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    forex_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="forexRate")
    currency_id: Optional[StrictStr] = Field(default=None, alias="currencyId")
    enrollment_id: Optional[StrictStr] = Field(default=None, alias="enrollmentId")
    individual_id: Optional[StrictStr] = Field(default=None, alias="individualId")
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    total_amount_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalAmountInUsd")
    total_taxes_in_usd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalTaxesInUsd")
    receiver_tenant_id: Optional[StrictStr] = Field(default=None, alias="receiverTenantId")
    closed: Optional[StrictBool] = None
    price_list_id: Optional[StrictStr] = Field(default=None, alias="priceListId")
    payment_term_id: Optional[StrictStr] = Field(default=None, alias="paymentTermId")
    quote_status: Optional[StrictStr] = Field(default=None, alias="quoteStatus")
    effective_to: Optional[datetime] = Field(default=None, alias="effectiveTo")
    effective_from: Optional[datetime] = Field(default=None, alias="effectiveFrom")
    description: Optional[StrictStr] = None
    title: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["tenantId", "firstName", "lastName", "companyName", "billingEmail", "addressLine1", "addressLine2", "postalCode", "countryId", "stateId", "cityId", "billingLocationId", "shippingLocationId", "shippingMethodId", "cartId", "userId", "forexRate", "currencyId", "enrollmentId", "individualId", "organizationId", "totalAmountInUsd", "totalTaxesInUsd", "receiverTenantId", "closed", "priceListId", "paymentTermId", "quoteStatus", "effectiveTo", "effectiveFrom", "description", "title"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderUpdateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict['tenantId'] = None

        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['companyName'] = None

        # set to None if billing_email (nullable) is None
        # and model_fields_set contains the field
        if self.billing_email is None and "billing_email" in self.model_fields_set:
            _dict['billingEmail'] = None

        # set to None if address_line1 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line1 is None and "address_line1" in self.model_fields_set:
            _dict['addressLine1'] = None

        # set to None if address_line2 (nullable) is None
        # and model_fields_set contains the field
        if self.address_line2 is None and "address_line2" in self.model_fields_set:
            _dict['addressLine2'] = None

        # set to None if postal_code (nullable) is None
        # and model_fields_set contains the field
        if self.postal_code is None and "postal_code" in self.model_fields_set:
            _dict['postalCode'] = None

        # set to None if country_id (nullable) is None
        # and model_fields_set contains the field
        if self.country_id is None and "country_id" in self.model_fields_set:
            _dict['countryId'] = None

        # set to None if state_id (nullable) is None
        # and model_fields_set contains the field
        if self.state_id is None and "state_id" in self.model_fields_set:
            _dict['stateId'] = None

        # set to None if city_id (nullable) is None
        # and model_fields_set contains the field
        if self.city_id is None and "city_id" in self.model_fields_set:
            _dict['cityId'] = None

        # set to None if billing_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.billing_location_id is None and "billing_location_id" in self.model_fields_set:
            _dict['billingLocationId'] = None

        # set to None if shipping_location_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_location_id is None and "shipping_location_id" in self.model_fields_set:
            _dict['shippingLocationId'] = None

        # set to None if shipping_method_id (nullable) is None
        # and model_fields_set contains the field
        if self.shipping_method_id is None and "shipping_method_id" in self.model_fields_set:
            _dict['shippingMethodId'] = None

        # set to None if cart_id (nullable) is None
        # and model_fields_set contains the field
        if self.cart_id is None and "cart_id" in self.model_fields_set:
            _dict['cartId'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if currency_id (nullable) is None
        # and model_fields_set contains the field
        if self.currency_id is None and "currency_id" in self.model_fields_set:
            _dict['currencyId'] = None

        # set to None if enrollment_id (nullable) is None
        # and model_fields_set contains the field
        if self.enrollment_id is None and "enrollment_id" in self.model_fields_set:
            _dict['enrollmentId'] = None

        # set to None if individual_id (nullable) is None
        # and model_fields_set contains the field
        if self.individual_id is None and "individual_id" in self.model_fields_set:
            _dict['individualId'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organizationId'] = None

        # set to None if receiver_tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.receiver_tenant_id is None and "receiver_tenant_id" in self.model_fields_set:
            _dict['receiverTenantId'] = None

        # set to None if price_list_id (nullable) is None
        # and model_fields_set contains the field
        if self.price_list_id is None and "price_list_id" in self.model_fields_set:
            _dict['priceListId'] = None

        # set to None if payment_term_id (nullable) is None
        # and model_fields_set contains the field
        if self.payment_term_id is None and "payment_term_id" in self.model_fields_set:
            _dict['paymentTermId'] = None

        # set to None if quote_status (nullable) is None
        # and model_fields_set contains the field
        if self.quote_status is None and "quote_status" in self.model_fields_set:
            _dict['quoteStatus'] = None

        # set to None if effective_to (nullable) is None
        # and model_fields_set contains the field
        if self.effective_to is None and "effective_to" in self.model_fields_set:
            _dict['effectiveTo'] = None

        # set to None if effective_from (nullable) is None
        # and model_fields_set contains the field
        if self.effective_from is None and "effective_from" in self.model_fields_set:
            _dict['effectiveFrom'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderUpdateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "companyName": obj.get("companyName"),
            "billingEmail": obj.get("billingEmail"),
            "addressLine1": obj.get("addressLine1"),
            "addressLine2": obj.get("addressLine2"),
            "postalCode": obj.get("postalCode"),
            "countryId": obj.get("countryId"),
            "stateId": obj.get("stateId"),
            "cityId": obj.get("cityId"),
            "billingLocationId": obj.get("billingLocationId"),
            "shippingLocationId": obj.get("shippingLocationId"),
            "shippingMethodId": obj.get("shippingMethodId"),
            "cartId": obj.get("cartId"),
            "userId": obj.get("userId"),
            "forexRate": obj.get("forexRate"),
            "currencyId": obj.get("currencyId"),
            "enrollmentId": obj.get("enrollmentId"),
            "individualId": obj.get("individualId"),
            "organizationId": obj.get("organizationId"),
            "totalAmountInUsd": obj.get("totalAmountInUsd"),
            "totalTaxesInUsd": obj.get("totalTaxesInUsd"),
            "receiverTenantId": obj.get("receiverTenantId"),
            "closed": obj.get("closed"),
            "priceListId": obj.get("priceListId"),
            "paymentTermId": obj.get("paymentTermId"),
            "quoteStatus": obj.get("quoteStatus"),
            "effectiveTo": obj.get("effectiveTo"),
            "effectiveFrom": obj.get("effectiveFrom"),
            "description": obj.get("description"),
            "title": obj.get("title")
        })
        return _obj


